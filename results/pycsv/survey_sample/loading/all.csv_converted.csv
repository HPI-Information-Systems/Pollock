Id,Title,Author,Abstract,DOI,Kw,qry-heter,qry-n,qry-ieee-1,qry-ieee-2,qry-ieee-3
,REST2SOAP: A framework to integrate SOAP services and RESTful services,"Peng, Y -Y and Ma, S -P and Lee, J","Nowadays, the mainstream of Web 2.0 Website services is in the REST style called RESTful Web service. RESTful services have been widely accepted by the public because of the usability and simplicity. Meanwhile, Web service technologies realize service-oriented architecture (SOA) successfully and are exploited in both industry and academia. Notably, service composition that can aggregate existing services into a new one delivers the most benefits of SOA through BPEL standard. However, BPEL cannot support RESTful services and integrate both Web 2.0 and SOA-based resources in a composite service directly. It means that it is costly or time-consuming to utilize RESTful services in an SOA-based application. Therefore, this paper presents a framework, namely REST2SOAP, to integrate SOAP services and RESTful services. REST2SOAP leverages WADL specification, and can wrap RESTful services into SOAP services semi-automatically. Using REST2SOAP, developers can create a BPEL service that combines SOAP, RESTful services and user interfaces simultaneously.",10.1109/SOCA.2009.5410458,Web 2.0;REST;RESTful service;SOA;SOAP service;service composition;BPEL; Simple object access protocol;Web services;Service oriented architecture;Mashups;Computer science;Oceans;Usability;Marine technology;Aggregates;User interfaces; formal specification;software architecture;user interfaces;Web services; Web 2.0;RESTful service;Web service;service-oriented architecture;SOA;REST style;WADL specification;user interfaces;SOAP service;BPEL,,1,1,,
,On Composition of SOAP Based and RESTful Services,"Thakar, U and Tiwari, A and Varma, S","Many online businesses expose their technological product and service offerings as web services. To offer the desired functionality, often a number of simple web services need to be combined to create a composite web service. Traditionally, services were implemented as SOAP based services. However, RESTful services are now becoming more popular. Thus, there is a large pool of services available to users for inclusion in a composite service. The BPEL (Business Process Execution Language) has been in use for creation of complex services as per the workflow. At present, the BPEL standard does not support inclusion of RESTful web services in the business process. This prevents inclusion of many useful services in a complex business use case where lots of web services are required in order to achieve desired functionality. In this paper, a method RESO Co has been proposed that enables the conventional BPEL engine to consume SOAP based as well as RESTful services in composition. The presented method thus helps in increasing the number of services available for composition while also preserving the advantage of lightweight nature of RESTful services.",10.1109/IACC.2016.99,SOAP;RESTful Services;BPEL;Composite Service; Simple object access protocol;Business;Java;Process control;Standards;Engines; access protocols;business data processing;Web services;Web Services Business Process Execution Language; SOAP based composition;restful services;composite Web service;Business Process Execution Language;BPEL;RESO Co approach,,1,1,,
,Open source apis for processing the XML result of web services,"Pawar, S and Chiplunkar, N N","The aim of this system is to use open source APIs to invoke and process the results of the Web services and to apply confidentiality and integration to the result of the Web services. In this system Web Services are requested using URL (Uniform Resource Locator) query to the WWW instead of SOAP message. When invoking the web services using JAX-RPC (Java Api for Xml-Based Remote Procedure Call ) with SOAP request, the result returned may not be received properly due to de-serialization problem of complex XML data sets. Therefore it is required to invoke such services by submitting the query as URL query and received the results as XML data set. This XML data set may be hampered by man-in-middle attack during transfer. Hence this system uses open source APIs for providing XML signature and XML encryption. At the receiver after decryption and integrity check, the required node from XML data set is extracted and presented to the user. This article is focused on usage of open source APIs (Application program interface) for invoking web services as Restful Web services, applying XML signature and XML encryption, parsing the XML result after reverse process at receiver side and extracting the required nodes according to the user given condition. The problem of de-serialization in receiving huge XML result is resolved in the proposed system. Â© 2017 IEEE.",10.1109/ICACCI.2017.8126114,Web Services;SOAP;XML;XML-Signature;XML Encryption;WSDL; XML;Uniform resource locators;Encryption;Simple object access protocol;Receivers; application program interfaces;cryptography;Java;public domain software;query processing;remote procedure calls;Web services;XML; open source APIs;URL query;complex XML data sets;XML data set;XML signature;Restful Web services;Uniform Resource Locator;JAX-RPC;Java API;XML-Based Remote Procedure Call;SOAP request;man-in-middle attack;XML encryption;Application program interface,,1,1,,
,Security solutions for Web Service attacks in a dynamic composition scenario,Sindhu S M; Kanchana R,"Web Services can be invoked from anywhere through internet without having enough knowledge about the implementation details. In some cases, single service cannot accomplish user needs. One or more services must be composed which together satisfy the user needs. Therefore, security is the most important concern not only at single service level but also at composition level. Several attacks are possible on SOAP messages communicated among Web Services because of their standardized interfaces. Examples of Web Service attacks are oversize payload, SOAPAction spoofing, XML injection, WS-Addressing spoofing, etc. Most of the existing works provide solution to ensure basic security features of Web Services such as confidentiality, integrity, authentication, authorization, and non-repudiation. Very few of the existing works provide solutions such as schema validation and schema hardening for attacks on Web Services. But these solutions do not address and provide attack specific solutions for SOAP messages communicated between Web Service. Hence, it is proposed to provide solutions for two of the prevailing Web Service attacks. Since new types of Web Service attacks are evolving over time, the proposed security solutions are implemented as APIs that are pluggable in any server where the Web Service is deployed.",10.1109/ICACCCT.2014.7019163,Web Services;WSDL;UDDI;SOAP;SAS API;WSAS API; Simple object access protocol;Security;Lead;Standards;Information services;Electronic publishing; application program interfaces;authorisation;data integrity;protocols;service-oriented architecture;Web services; security solutions;Web service attacks;dynamic composition scenario;Internet;SOAP messages;SOAPAction spoofing;XML injection;WS-Addressing spoofing;confidentiality;integrity;authentication;authorization;nonrepudiation;schema validation;schema hardening;API;service oriented architecture;SOA;simple object access protocol,,1,1,,
,Call/Messaging Open API for Telecommunication Services,S. Jung; M. Kang; D. Choi,"With the saturation of existing intelligent network services, it is becoming increasingly difficult to develop new profitable services. The current trend seems to be moving toward the convergence of traditional telephone networks with the Internet. The capabilities of Internet terminals, such as PCs, are more powerful than those of traditional terminals for telephone networks, particularly in terms of their storage capabilities and user interface. IT developers can easily create new telecommunication services using Parlay APIs, without needing to become experts in the field of telephony. Although using SOAP over HTTP allows for easier communication, normal individual developers have some difficulties in processing SOAP messages due to the verbose XML format. REST based APIs can be a good alternative, as they have no additional messaging layer except for HTTP. In this paper, we introduce REST based Open APIs for building outbound call and messaging services. The suggested APIs enable the service features of click-to-dial, mini-conference, call record, audio-on-demand, short messaging and voice messaging, and show the power of the convergence between telephone networks and the internet.",10.1109/ICACT.2008.4493967,Telecommunication Service;Parlay API;Call/Messaging API; Telecommunication services;Internet telephony;IP networks;Convergence;Simple object access protocol;Intelligent networks;Personal communication networks;User interfaces;XML;Message service; application program interfaces;electronic messaging;Internet;voice mail;XML; Parlay API;call-messaging open;telecommunication services;intelligent network services;telephone networks;Internet terminals;SOAP messages;verbose XML format;HTTP;REST based open API;outbound call;messaging services;click-to-dial;mini-conference,,1,1,,
,Integrating RESTful Service into BPEL Business Process on Service Generation System,"Wu, B and Lin, R and Chen, J","New value-added business, generated by Web service composition in BPEL, provides more powerful and flexible features. SOAP-based web services invoked in BPEL are heavy with redundant information and lower performance. RESTful Web service is brought forward to new value-added business as an alternative solution. However, it's a big challenge to compose RESTful Web services with SOAP-based Web Services in SOA BPEL business processes. BPEL is not designed to use RESTful Web services because these types of services do not use WSDL to describe themselves. This paper proposes a novel approach for integrating RESTful Web services and SOAP-based Web services in business processes described in BPEL. The approach is applied to a practical multimedia conference BPEL process, and the experimental data show the stability of the new RESTful BPEL process with a higher performance. Â© 2013 IEEE.",10.1109/SCC.2013.70,Business Process;RESTful Web services;SOAP Web service;Service Integration; Business;Simple object access protocol;Standards;Engines;Protocols;Servers; business data processing;service-oriented architecture;Web services; representational state transfer;multimedia conference BPEL process;service-oriented architecture;SOA BPEL business process;SOAP-based Web services;Web service composition;value-added business;service generation system;business process execution language;RESTful Web service integration,,1,1,,
,Scalable microservice based architecture for enabling DMTF profiles,D. Malavalli; S. Sathappan,"This paper proposes an architecture for implementing DMTF management Profiles in middleware layer of a management console, using microservices. Microservices is a software architecture style, gaining popularity for developing Internet scale applications. This paper will also provide a comparison with the current prevalent method of design. This paper will also discuss how this microservice can be exposed utilizing REST thus further making it scalable, lightweight etc. This scalable microservice in turn can interact with the managed device using either SOAP (as defined in DASH or SMASH) or REST (as defined in Redfish).",10.1109/CNSM.2015.7367395,Webservices;Microservices;SOA;DMTF Profiles;DASH;REST;JSON;SOAP;XML;Enterprise;Architecture;Manageability; Decision support systems; middleware;software architecture; scalable microservice based architecture;DMTF profiles;middleware layer;software architecture,,1,1,,
,API based security solutions for communication among web services,A. K. Rajaram; B. C. Babu; C. Kishore Kumar R,"The popularity of web services has largely influenced the way in which enterprise business is conducted. Since web services enable easy accessibility of data, dynamic connections, and relatively less human interventions, ensuring confidentiality and integrity of data that is transmitted via web services protocols becomes more significant. If a single service does not fulfill the service consumer requirements, it is necessary to compose several web services, which together satisfy the user requirements. Security attacks occur on SOAP messages that are communicated among web services while accessing a service or during service composition. Most of the existing works on web services security have provided solutions only for ensuring client authentication, confidentiality, and integrity of information in network layer and not in application layer. WS-Security and XML based web service security also provides message layer security in network layer and not in application layer. Hence, a novel approach that prevents the message alteration attack on SOAP messages and a security solution that detects and overcomes XML injection attack have been proposed in this paper. Our approach uses pluggable APIs in the service provider side and security services in the middleware side. The attacks were simulated and non-vulnerability of the proposed solutions to these attacks have been verified.",10.1109/ICoAC.2013.6922014,Web Services;Security;Composition;API;Message Alteration Attack;XML Injection Attack; Cryptography;Simple object access protocol;Electronic mail;Educational institutions;Computers;Computer science;Web servers; authorisation;business data processing;computer network security;data integrity;message authentication;middleware;Web services;XML; API-based security solutions;enterprise business;data accessibility;dynamic connections;data integrity;data confidentiality;Web service protocol;user requirement satisfaction;security attacks;SOAP messages;service composition;Web service security;client authentication;information integrity;information confidentiality;network layer;WS-Security;XML-based Web service security;message layer security;message alteration attack;XML injection attack detection;service provider;middleware,,1,1,,
,Comparative evaluation of the maintainability of RESTful and SOAP-WSDL web services,"De Oliveira, R R and Sanchez, R V V and Estrella, J C and De Mattos Fortes, R P and Brusamolin, V","Web services not only are one of the most promising technologies in terms of the availability of network services but also solve the problem of integrating heterogeneous applications on the web. Because of their increasing popularity, maintainability has become an important issue as it helps to reduce maintenance costs and improve software quality. However, from the perspective of evolution and maintenance, there are many issues to be examined. This paper describes a controlled experiment to compare RESTful and SOAP-WSDL web services in terms of specific modifiability sub-characteristics and time spent on web services maintenance. The findings indicate that RESTful web services are more maintainable on the server-side, while SOAP-WSDL web services are more maintainable on the client-side. Studies based on controlled experiments are promising and may help reduce the maintenance costs of web services as well as improve the quality of software-oriented services. Â© 2013 IEEE.",10.1109/MESOCA.2013.6632733,Software Maintainability;Controlled Experiment;Web Services;RESTful;SOAP-WSDL; Web services;Maintenance engineering;Servers;Software measurement; client-server systems;software maintenance;software quality;Web services; RESTful;SOAP-WSDL Web services;network service availability;Web heterogeneous applications;maintenance cost;software quality improvement;modifiability subcharacteristics;Web services maintenance;server-side maintainability;client-side maintainability;software-oriented service,,1,1,,
,Towards composition of RESTful web services,"Rathod, D M and Dahiya, M S and Parikh, S M","RESTful HTTP and SOAP/WSDL services are two architectural styles for building web services, Where SOAP/WSDL based services follows an operation centric approach and RESTful HTTP based services follows resource centric approach. Dynamic composition of SOAP web services has been widely studied by researchers as compare to RESTful web services. RESTful web services have gained momentum in the development of distributed application but mostly it is hard wired with client application. We proposed novel approach termed as Web Service Resource Bundle (WSRB) for RESTful web service composition that takes care of selection of targeted web services considering inter-service dependencies and also dynamically bind services with client application. WSRB is bundle of composition of RESTful web service; ready to consume based on key passed by client. We developed hotel booking benchmark application with android mobile client using RESTful and SOAP based web services. We also measured benchmark results in both cases which show that proposed approach WSRB with RESTful web service gives best performance as compare to SOAP based web service. Â© 2015 IEEE.",10.1109/ICCCNT.2015.7395237,RESTful;SOAP;Web Service;Composition;WSDL;HTTP; Simple object access protocol;Benchmark testing;Ice;Unified modeling language; resource allocation;software architecture;Web services; WSRB;Web service resource bundle;resource centric approach;architectural style;SOAP/WSDL service;RESTful HTTP service;representational state transfer;RESTful web service composition,,1,1,,
,A comparison of RESTful vs. SOAP web services in actuator networks,S. Malik; D. Kim,"RESTful and SOAP-based services are the two main Web provisioning services nowadays. RESTful services are becoming widely popular with the passage of time and are replacing SOAP-based Web services in many fields due to ease of use, deployment and light weightiness. Hence, a vital question of interest arises regarding better performance between RESTful and SOAP-based services. In this paper, we present the control system architecture using RESTful and SOAP-based protocol an indoor actuator networks. And, we aim to compare both the services by designing an indoor actuator networks based on SOAP and REST architectural styles.",10.1109/ICUFN.2017.7993893,REST (Representational state transfer);SOAP (Simple Object Access Protocol);Internet of Things (IoT); Simple object access protocol;Actuators;Protocols;Computer architecture;Performance evaluation; actuators;protocols;Web services; SOAP Web services;SOAP-based services;Web provisioning services;RESTful services;control system architecture;SOAP-based protocol;indoor actuator networks;REST architectural styles,,1,1,,
,Sharing service semantics using SOAP-based and REST Web services,Xuan Shi,This paper describes a method that combines the attributes from both SOAP-based and REST Web services in the same semantic service description framework and create a bridge between Web services and the Semantic Web under the same Internet Protocol (HTTP) without using any extra framework such as WSDL or SOAP. This method allows users to access the functional components of any software located in a remote machine while using distributed computing's power through an easy and understandable process,10.1109/MITP.2006.48,Web services;SOAP-based Web services;REST Web services; Web services;Simple object access protocol;Software systems;XML;Libraries;Distributed computing;Authentication;Software design;Representational state transfer;Web and internet services; object-oriented programming;semantic Web;transport protocols;XML; SOAP-based Web services;REST Web services;semantic service description framework;Semantic Web;Internet Protocol,,1,1,,
,Hierarchical RNN Networks for Structured Semantic Web API Model Learning and Extraction,S. Liu; Y. Li; G. Sun; B. Fan; S. Deng,"RESTful Web APIs have no description files like WSDL in traditional Web service. Although some REST API definition models have been arising recently, there is still lacking in structured description format for existing large mounts of Web APIs. Almost all Web APIs are documented in semi-structured web pages, and these documentation formats are various for different sites. It's hard for machine to read the semantics of Web APIs. In this paper, we have proposed a novel hierarchical recurrent neural network to convert REST API documentation to structured machine-readable description format -- the Swagger REST API specification. The network extracts the Swagger defined attributes of a REST API from HTML web pages without any feature engineering. With the extracted API specifications, we built an API repository to index, search and compose Web APIs. Experiment showed that the hierarchical RNN model performed well even with only a few training samples.",10.1109/ICWS.2017.85,Web API Extraction;Swagger;RNN; Web pages;Logic gates;Recurrent neural networks;HTML;Documentation;Semantics;Data mining; application program interfaces;learning (artificial intelligence);recurrent neural nets;semantic Web;Web services; hierarchical RNN networks;structured semantic Web API model learning;RESTful Web APIs;traditional Web service;REST API definition models;structured description format;semistructured web pages;REST API documentation;structured machine-readable description;Swagger REST API specification;HTML web pages;extracted API specifications;API repository;hierarchical RNN model;recurrent neural network;Swagger,,1,1,,
,A Case Study of Web API Evolution,"Sohan, S M and Anslow, C and Maurer, F","When applications are integrated using web APIs, changes on a web API may break the dependent applications. This problem exists because old versions of the APIs may no longer be supported, a lack of adequate documentation to upgrade to a newer version, and insufficient communication of changes. In this paper we conducted a case study of evolving Web APIs to investigate what changes are made between versions and how the changes are documented and communicated to the API users. The findings are a list of recommendations for practitioners and researchers based on API change profiles, versioning, documentation and communication approaches that are observed in practice. This study will help inform developers of evolving Web APIs to make decision about versioning, documentation and communication methods. Â© 2015 IEEE.",10.1109/SERVICES.2015.43,Case Study;RESTful;SOAP;Web API Evolution;WSDL; Google;Documentation;Facebook;Business;Simple object access protocol;Industries;XML; application program interfaces;Internet;software maintenance;system documentation; API change profiles;Web API versioning;Web API documentation;Web API communication,,1,1,,
,Mashup service release based on SOAP and REST,"Su, H and Cheng, B and Wu, T and Li, Huijie Su; Bo Cheng; Tong Wu; Xiaofeng","In recent years,with more and more Mashup services appering, this paper proposed the solution to Mashup service release based on SOAP and REST. This paper introduces the Mashup service architecture of three layer system, discusses the function of each layer, and supports the rapid generation of Mashup services and service management. At the same time, in this architecture the paper introducts the details of the SOAP and the REST Web service design and implementation, completes the registration, operation, updation and delete of the Mashup service in a variety of ways, and enhances the compatibility. Â© 2011 IEEE.",10.1109/ICCSNT.2011.6182150,SOAP Web Service;REST Web Service;Mashup; Mashups;Simple object access protocol;XML;Computer architecture;Instruction sets; Web services; mashup service release;SOAP;mashup service architecture;three layer system;service management;REST Web service design,,1,1,,
,"A Framework for Composing SOAP, Non-SOAP and Non-Web Services","Lee, J and Lee, S -J and Wang, P -F","Recently, there is a trend on developing mobile applications based on service-oriented architecture in numerous application domains, such as telematics and smart home. Although efforts have been made on developing composite SOAP services, little emphasis has been put on invoking and composing a combination of SOAP, non-SOAP, and non-web services into a composite process to execute complex tasks on various mobile devices. Main challenges are two-fold: one is how to invoke and compose heterogeneous web services with various protocols and content types, including SOAP, RESTful, and OSGi services; and the other is how to integrate non-web services, like web contents and mobile applications, into a composite service process. In this work, we propose an approach to invoking and composing SOAP, non-SOAP, and non-web services with two key features: an extended BPEL engine bundled with adapters to enable direct invocation and composition of SOAP, RESTful and OSGi services based on Adapter pattern; and two transformation mechanisms devised to enable conversion of web contents and Android activities into OSGi services. In the experimental evaluations, we demonstrate network traffic and turnaround time of our approach are better than those of the traditional ones. Â© 2008-2012 IEEE.",10.1109/TSC.2014.2310213,Heterogeneous service composition;web service;service composition engine; Simple object access protocol;Engines;Androids;Humanoid robots;Protocols;Mobile communication; Android (operating system);mobile computing;service-oriented architecture;Web services;Web Services Business Process Execution Language; SOAP service composition;nonSOAP service composition;nonWeb service composition;mobile applications;service-oriented architecture;composite SOAP service development;composite process;complex task execution;mobile devices;heterogeneous Web service composition;heterogeneous Web service invoking;RESTful service;OSGi service;nonWeb service integration;Web contents;composite service process;extended BPEL engine;Adapter pattern;transformation mechanisms;Android activities;network traffic;turnaround time,,1,1,,
,Towards a Reversible BPEL Debugger,L. Bao; S. Chen; X. Liu; S. Hu; P. Chen,"Despite the great momentum gained about the testing, analysis and verification of BPEL process, little attention has paid to the debugging issues, especially about the building of ad hoc debuggers. In this paper, we propose and implement RBDB (reversible BPEL debugger), a specially made reversible debugger for BPEL process. RBDB is built on the abstract debugging APIs to fulfill its functionality. A reversible concurrent debugging model and three strategies to handle different type of external Web services are introduced later. Finally, a comprehensive analysis of experiment data are presented. Evaluation results demonstrate that RBDB can improve users' efficiency significantly and decrease the invoking times of external services substantially.",10.1109/ICWS.2008.48,BPEL;Reversible Debugging;Debugging Model;Web Services; Debugging;Web services;History;Service oriented architecture;Switches;Software engineering;Software testing;Data analysis;Kernel;Control systems; application program interfaces;business data processing;program debugging;specification languages;Web services; reversible BPEL debugger;BPEL process testing;BPEL process verification;BPEL process analysis;abstract debugging API;reversible concurrent debugging model;Web service,,1,1,,
,Investigating Web APIs on the World Wide Web,"Maleshkova, M and Pedrinaci, C and Domingue, J","The world of services on the Web, thus far limited to ""classical"" Web services based on WSDL and SOAP, has been increasingly marked by the domination of Web APIs, characterised by their relative simplicity and their natural suitability for the Web. Currently, the development of Web APIs is rather autonomous, guided by no established standards or rules, and Web API documentation is commonly not based on an interface description language such as WSDL, but is rather given directly in HTML as part of a webpage. As a result, the use of Web APIs requires extensive manual effort and the wealth of existing work on supporting common service tasks, including discovery, composition and invocation, can hardly be reused or adapted to APIs. Before we can achieve a higher level of automation and can make any significant improvement to current practices and technologies, we need to reach a deeper understanding of these. Therefore, in this paper we present a thorough analysis of the current landscape of Web API forms and descriptions, which has up-to-date remained unexplored. We base our findings on manually examining a body of publicly available APIs and, as a result, provide conclusions about common description forms, output types, usage of API parameters, invocation support, level of reusability, API granularity and authentication details. The collected data provides a solid basis for identifying deficiencies and realising how we can overcome existing limitations. More importantly, our analysis can be used as a basis for devising common standards and guidelines for Web API development. Â© 2010 IEEE.",10.1109/ECOWS.2010.9,Web APIs;RESTful services;Web services; Mashups;XML;Documentation;Authentication;Correlation;Manuals; application program interfaces;hypermedia markup languages;service-oriented architecture;Web services; Web API;World Wide Web;Web services;WSDL;SOAP;interface description language;HTML;Webpage;authentication,,1,1,,
,From Open API to Semantic Specifications and Code Adapters,"Schwichtenberg, S and Gerth, C and Engels, G","Today, modern IT-systems are often an interplay of third-party web services. Developers in their role as requesters integrate existing services of different providers into new IT-systems. Providers use frameworks like Open API to create syntactic service specifications from which requesters generate code to integrate services. Proper service discovery is crucial to identify usable services in the growing plethora of third-party services. Most advanced service discovery approaches rely on semantic specifications, e.g., OWL-S. While semantic specifications are crucial for a precise discovery, syntactical specification are needed for service invocation. To close the gap between semantic and syntactic specifications, service grounding establishes links between the semantic and syntactic specifications. However, for a large number of web services still no semantic specification or grounding exists. In this paper, we present an approach that semi-automates the semantic specification of web services for service providers and additionally helps service requesters to leverage semantic web services. Our approach enables a higher degree of automation than other approaches. This includes the creation of semantic specifications and service groundings for service providers as well as the integration of services for requesters by using our code generator. As proof-of-concept, we provide a case study, where we derive a sophisticated semantic OWL-S specification from a syntactic Open API specification. Â© 2017 IEEE.",10.1109/ICWS.2017.56,Open API;RESTful;Grounding;Semantic Web Services;Lifting;Lowering;Adapter Generation;Service Invocation; Semantics;Syntactics;Ontologies;Web services;Grounding;Java;Generators; application program interfaces;knowledge representation languages;semantic Web;Web services; third-party web services;syntactic service specifications;service invocation;service grounding;service providers;service requesters;syntactic Open API specification;semantic OWL-S specification;code adapters;semantic Web services;service discovery,,1,1,,
,Migration of SOAP-based services to RESTful services,"Upadhyaya, B and Zou, Y and Xiao, H and Ng, J and Lau, A","Web services are designed to provide rich functionality for organizations and support interoperable interactions over a network. Web services are mainly realized in two ways: 1) SOAP-based services and 2) RESTful services. For the service providers, RESTful services can improve system flexibility, scalability, and performance as compared to the SOAP-based Web services. It is equally attractive to end users as it is consume less resources (i.e., battery, processor speed, and memory). Additionally, REST-based services do not include complex standards and heterogeneous operations; and hence are easier to consume and compose as compared to SOAP-based Web services. We provide an approach to migrate SOAP-based services to RESTful services. We identify resources from a SOAP-based Web service by analyzing its service description and mapping the contained operations to resources and HTTP methods. To demonstrate the effectiveness of our approach, we conduct a case study on a set of publicly available SOAP-based Web services. The results of our case study show that our approach can achieve high accuracy of identifying RESTful services from the interfaces of SOAP-based services. Our approach can improve the performance for invoking Web services after SOAP-based services are migrated to RESTful services. Â© 2011 IEEE.",10.1109/WSE.2011.6081828,Service Migration;RESTful Services;SOAP Services;Thin Clients; Cities and towns;Semantics;Simple object access protocol;Protocols;Mobile communication;XML; Web services; SOAP-based services;RESTful services;service providers;SOAP-based Web services;service description;HTTP method,,1,1,,
,Web services SOAP optimization techniques,A. W. Mohamed; A. M. Zeki,"SOAP is a web service mostly used by enterprise web applications, it provides simplicity, ease of use, easy extensibility, security and standardization. SOAP's poor performance is putting its usefulness into jeopardy especially where high performance cannot be compromised, for instance in the portable devices and scientific applications. Proper configuration and conversion of messages during web communication are one of the main bottlenecks. This paper describes the concept of SOAP and different ways to configure it based on the scenario needs. SOAP optimization techniques that can help in boosting in the performance and bypassing the bottlenecks are studied in this research. These techniques do not change the SOAP technology. The implementation and performance study show that the techniques widely improve the performance of SOAP web services. Several factors that improve the proper utilization of SOAP functionalities, enabling only those required and proper differential serialization of XML messages will be explored. This improvement can increase its capabilities and use in a wider scope.",10.1109/ICETAS.2017.8277881,component;Web Services;Optimization;SOAP;REST;WSDL; Simple object access protocol;Testing;Optimization;Tools;XML;Standards; business data processing;optimisation;service-oriented architecture;Web services; web communication;SOAP web services;web service;enterprise web applications;SOAP optimization techniques;Simple Object Access Protocol,,1,1,,
,Latencies of Service Invocation and Processing of the REST and SOAP Web Service Interfaces,T. Aihkisalo; T. Paaso,"This paper studies the latencies experienced by the Web service client invoking a proprietary multimedia messaging service with both REST and SOAP interfaces implemented. This study has been made utilising XML, JSON, MTOM/XOP and Google Protostuff message and message content encodings where available. We study the overall round trip time from the start of the request to the response returning to the client. Furthermore, we measure and analyse the phases the request travels through to the server and the return of an associated response. The results of the overall round trip time and distribution of the delays along the service invocation path is presented to ultimately aid and justify a selection of the better performing interface implementation and associated message encoding scheme for the solution. Both interfaces implement the same functionality of registering a client, sending and receiving a message and finally unregistering. Therefore, the results are highly comparable which show differences not only between REST and SOAP but also between XML and JSON and how it can be further improved.",10.1109/SERVICES.2012.55,REST;SOAP;WS;HTTP; Simple object access protocol;Delay;Servers;Message service;Encoding;XML; client-server systems;electronic messaging;multimedia communication;protocols;Web services;XML; REST Web service interface processing;SOAP Web service interface processing;service invocation latencies;multimedia messaging service;XML;JSON;MTOM/XOP;Google Protostuff message;message content encodings;overall round trip time;delay distribution;service invocation path;client registration,,1,1,,
,QoS-Aware Selection of Web APIs Based on Îµ-Pareto Genetic Algorithm,"Ma, S -P and Lan, C -W and Ho, C -T and Ye, J -H","Web API is the lightweight version to the SOAP (Simple Object Access Protocol) service and usually applies REST (Representational State Transfer) as the architectural style. Nowadays, the service-oriented computing paradigm is shifting from the SOAP services to the Web APIs, i.e., RESTful services. Rather than hard coding from scratch, the methodology of service-oriented computing emphasizes identifying the granularity services and composing services into executable applications. Quality of Service (QoS) is always an important concern in the selection of services. The QoS driven service selection problem for service composition has been proven as NP-Complete since there are nm combinations for a given composite service involving m tasks with n candidate services for each task. To address this issue, this study proposes a methodology based on Genetic Algorithms for the selection of Web APIs. The proposed approach in this research provide several features: 1) Ïµ-Pareto dominance relations are introduced to help the discrimination of composite QoS, 2) the Ïµ value for each dimension is determined by the AHP-based method (AHP: Analytic Hierarchy Process), and 3) the Genetic Algorithm is employed to find out the optimal combinations of Web APIs. Experimental results demonstrate that the proposed approach can effectively locate the combination of Web APIs based on the user-preferred QoS indicators without sacrificing other kinds of service quality. Â© 2016 IEEE.",10.1109/ICS.2016.0122,Service Selection;Service Composition;Service Optimization;Web API;Genetic Algorithm; Quality of service;Genetic algorithms;Optimization;Time factors;Simple object access protocol;Linear programming;Hypercubes; access protocols;analytic hierarchy process;application program interfaces;computational complexity;genetic algorithms;quality of service;service-oriented architecture; QoS-aware selection;Web API;Îµ-Pareto genetic algorithm;SOAP;simple object access protocol;REST;representational state transfer;service-oriented computing paradigm;quality of service;QoS;NP-complete problem;AHP;analytic hierarchy process,,1,1,,
,RESTful web services composition &amp; performance evaluation with different databases,"Sakthivel, U and Singhal, N and Raj, P","Service composition is a popular mechanism to orchestrate different and distributed services to produce composite services. Composed services are typically businesscentric, and process-aware. There are a variety of use cases mandating such kinds of service compositions. With services emerging as the most appropriate building block and the unit of deployment, finding, composing, binding and leveraging services turns out to be an important job for software architects and developers. However, service composition is not an easy affair. There are several methods proposed by various researchers and scholars across the globe. Several parameters and considerations are being made in order to simplify and streamline service composition. Predominantly there are SOAP and RESTful services. There are markup languages to describe and define the distinct capabilities of participating services. In the recent past, a new architectural style (Microservices architecture (MSA)) is emerging and evolving fast. Microservices are lightweight, autonomous, self-defined, horizontally scalable, interoperable, and composable. In this paper, we have leveraged different databases for different services and evaluated the service performance individually and collectively. That is, multiple services are used and each service uses a database instance. Â© 2017 IEEE.",10.1109/ICEECCOT.2017.8284608,SOAP;RESTful;Composition of services; Databases;Simple object access protocol;Business;Standards;Hospitals; database management systems;distributed processing;software architecture;Web services; databases;distributed services;RESTful web services composition;performance evaluation;SOAP services;multiple services;service performance;participating services;RESTful services;composed services;composite services;service composition,,1,1,,
,Service-Level Interoperability Issues of Platform as a Service,"AndroÄec, D and VrÄek, N and KÃ¼ngas, P","The numerous heterogeneities among different providers make platform as a service interoperability an interesting and complex research and practical problem. For example, each provider offers its own remote application programming interfaces (APIs). The main aim of this paper is to identify and address service-level interoperability issues when using APIs from different commercial providers of platform as a service. First, we define use case to add current user information from one platform as a service offer to the application hosted on another offer. To address interoperability problems, the ontology driven data mediation will be used and tested in this use case. Remote vendors' APIs are implemented as web services. Resulting web operations and their inputs/outputs are semantically annotated using cross-PaaS concepts from the developed platform as a service OWL ontology. Next, SAWSDL and XSLT are used to define service type mappings. Actual composition of platform as a service APIs is implemented by means of AI planner and developed Java web application. Testing and validation was performed on a case where current Sales force's user is added to data container in Vosao content management system deployed on Google App Engine. Novelty of the paper is a specific application domain (composition of operations defined in PaaS APIs) and new algorithm for identification of interoperability problems. Â© 2015 IEEE.",10.1109/SERVICES.2015.60,platform as a service;interoperability;service composition;cloud APIs;ontology driven mediation; Platform as a service;Ontologies;Interoperability;Mediation;Java;Semantics; application program interfaces;ontologies (artificial intelligence);open systems;Web services; service-level interoperability issues;platform-as-a-service;application programming interface;API;user information;ontology driven data mediation;Web services;service OWL ontology;Web ontology language;SAWSDL;XSLT;cross-PaaS concepts;Java Web application;Vosao content management system;Google App Engine,1,1,1,,
,Enabling interoperability for autonomous digital libraries: an API to CiteSeer services,Y. Petinot; C. L. Giles; V. Bhatnagar; P. B. Teregowda; H. Han,"We introduce CiteSeer-API, a public API to CiteSeer-like services. CiteSeer-API is SOAP/WSDL based and allows for easy programatical access to all the specific functionalities offered by CiteSeer services, including full text search of documents and citations and citation-based document discovery. CiteSeer-API is currently showcased on SMEALSearch, a digital library search engine for business academic publications.",10.1109/JCDL.2004.240057,; Software libraries;Simple object access protocol;Web server;Information retrieval;Search methods;Permission;Computer science;Search engines;Standardization;Aggregates; application program interfaces;information retrieval;information services;citation analysis;search engines;full-text databases;open systems; CiteSeer-API;CiteSeer-like services;SOAP;WSDL;full text search;citation-based document discovery;SMEALSearch;digital library search engine;business academic publication;interoperability,,1,1,,
,Large-Scale Longitudinal Analysis of SOAP-Based and RESTful Web Services,W. Jiang; D. Lee; S. Hu,"While the usage of web services has increased explosively in recent years, very few studies examined the characteristics of web services using large-scale real data for a long period of time. In this paper, we present one such a large scale longitudinal analysis of publicly available web services of SOAP-based and RESTful types. For the period of roughly one year and from five different world-wide locations, we closely monitor the ups and downs of various basic properties of web services and their QoS values using a total of 825,132 real web services.",10.1109/ICWS.2012.45,Service Survey;RESTful Web Service;SOAP-Based Web Service; Web services;Quality of service;Throughput;Time factors;Standards;Documentation;Google; quality of service;Web services; large-scale longitudinal analysis;SOAP-based Web services;RESTful Web services;Web services usage;large-scale real data;QoS values,,1,1,,
,An Ontology Model for Manufacturing Grid Service by Extending OWL-S,M. Wang; S. Li; J. Zhou,"Manufacturing grid is a new pattern developed to answer unprecedented challenges in manufacturing industry, one of the most important foundations of which is encapsulating or modeling manufacturing resources into grid service. But this kind of grid service is restricted by ambiguous and insufficient service description. This paper presents an ontology model, called M-service profile ontology, which provides the framework for explicitly encoding semantics of domain-specific engineering information. The model is generated by extending OWL-S with two classes. One is ManufacturingProfile class which provides formal engineering indexes needed during collaborative work. Anther is the QoSProfile class which provides a mechanism to represent quality of service. This ontology model enriches semantic descriptions of grid service which will be very conducive for later service discovery and management.",10.1109/ICFCSA.2011.55,manufacturing grid service;OWL-S;ontology;quality of service; Manufacturing;Ontologies;Measurement;Semantics;Quality of service;Web services;OWL; agile manufacturing;grid computing;knowledge representation languages;ontologies (artificial intelligence);production engineering computing;quality of service;service-oriented architecture;Web services; ontology model;manufacturing grid service;OWL-S;manufacturing industry;M-service profile ontology;domain-specific engineering information;manufacturingprofile class;Anther;QoSprofile class;quality of service;agile manufacturing;service-oriented architecture;Web service,,1,1,,
,RESTful Web Service Mining: Simple Algorithm Supporting Resource-Oriented Systems,"StroiÅski, A and Dwornikowski, D and BrzeziÅski, J","Composition of Web Services (WS) into business processes (BP) often results in occurrence of defects in a process: implicit dependencies, incorrect contexts, non-optimal or bottlenecked workflow, and deadlocks. To deal with these problems, WS Mining (process mining in SOA) research provides methods and tools to discover, evaluate and enhance real world processes basing on a process model discovered from a log. Unfortunately, current research in this field only concerns SOAP-WS which are not as well-suited as RESTful-WS in the context of current research trends like Internet of Things or Web 2.0. WS Mining methods and tools should consider RESTful-WS where functionality of the system is expressed in the form of resources and relationships among them. In this paper we show the idea of discovering process models for interacting RESTful-WS with respect to both workflow and resources perspectives. We introduce extended version of the Î± algorithm (AA), RESTful-WS mining algorithm (RMA), which discovers hierarchical process models and resource-oriented perspective of a process including local and global behavior. Finally, we present a brief discussion on how RMA decomposes a problem into smaller ones, significantly reducing the execution time in real time scenarios. Â© 2014 IEEE.",10.1109/ICWS.2014.106,RESTful Web Service Mining;Process Mining;RESTful Web Services; Context;Context modeling;Data mining;Educational institutions;Abstracts;Service-oriented architecture; data mining;service-oriented architecture;Web services; RESTful Web service mining;resource-oriented systems;Web service composition;business process;SOA;service oriented architecture;process mining;WS mining;SOAP-WS;Internet of Things;Web 2.0;hierarchical process models;resource-oriented perspective,,1,1,,
,Metadata in SDN API for WSN,M. Sneps-Sneppe; D. Namiot,"This paper discusses the system aspects of the development of applied programming interfaces in Software-Defined Networking (SDN). SDN is a prospect software enablement for Wireless Sensor Networks (WSN). So, application layer SDN API will be the main application API for WSN. Almost all existing SDN interfaces use so-called Representational State Transfer (REST) services as a basic model. This model is simple and straightforward for developers, but often does not support the information (metadata) necessary for programming automation. In this article, we cover the issues of representation of metadata in the SDN API.",10.1109/NTMS.2015.7266504,SDN;northbound API;REST;metadata;WSN;WSDL;Parlay; Metadata;Service-oriented architecture;Wireless sensor networks;Computer architecture;Programming; meta data;software defined networking;wireless sensor networks; metadata;programming interfaces;software-defined networking;wireless sensor networks;WSN;SDN interfaces;representational state transfer;REST services;programming automation,,1,1,,
,Services Mashups: The New Generation of Web Applications,D. Benslimane; S. Dustdar; A. Sheth,"Web services are becoming a major technology for deploying automated interactions between distributed and heterogeneous applications, and for connecting business processes. Service mashups indicate a way to create new Web applications by combining existing Web resources utilizing data and Web APIs. They facilitate the design and development of novel and modern Web applications based on easy-to-accomplish end-user service compositions.",10.1109/MIC.2008.110,service mashups;Web services;Semantic Web technologies;Web APIs;WSDL; Mashups;Web services;Ice;Web and internet services;Simple object access protocol;Mediation;Semantic Web;Collaboration;Joining processes;Context-aware services; Web services; services mashups;Web applications;Web services;automated interactions;distributed application;heterogeneous application;Web resources;Web API;easy-to-accomplish end-user service compositions,,1,1,,
,Web services: e-commerce partner integration,N. Kulkarni; S. Kumar; K. Mani; S. Padmanabhuni,"Online retailers have used a succession of technologies to showcase their products and services on the Web. That experience gives them a greater insight into what it is that the latest technology, Web services, can offer them. This article gives a brief survey of the evolution of evolving e-commerce technologies, explaining what each offered and could not offer to retailers. It then describes how Amazon's investment in its e-commerce services (ECS) gives Amazon partners access to common online retailing functionalities. These researchers also present the partner integration framework they developed to help retailers define what services they need in an online retail system.",10.1109/MITP.2005.46,Web services;partner integration;e-commerce;Amazon;online retail;representational state transfer;REST;Web Services for Remote Portlets;WSRP;Extensible Markup Language;XML;Simple Object Access Protocol;SOAP;Web Services Description Language;WSDL;universal description discovery and integration;UDDI; Web services;Costs;Virtual private networks;Service oriented architecture;XML;Simple object access protocol;Scalability;Data handling;Application specific processors;Internet; electronic commerce;Internet;retail data processing; Web services;partner integration;e-commerce;Amazon;online retail;representational state transfer;WSRP;XML;simple object access protocol;WSDL;universal description discovery and integration;UDDI,,1,1,,
,Research on IOT RESTful Web Service Asynchronous Composition Based on BPEL,"Zhang, L and Yu, S and Ding, X and Wang, X","In recent years, The Internet of Things(IOT) is one of the hottest research topics. It was originally defined as connected all the things through the sensing devices to the Internet. In addition, Service-Oriented methodology has gradually drawn people's attention. Therefore, integrated The IOT with Service-Oriented methodology is very important. But now IOT service composition is mostly synchronous and service model is more complex. RESTful web services have been widely recognized and used because of their lightweight and succinct. RESTful web services introduce a new kind of abstraction, the resource, so that they are hard to compose using the Business Process Execution Language (BPEL). In order to compose asynchronous RESTful web services and make use of various IOT services, this paper proposes an asynchronous RESTful web service recursive measure, which is based on the BPEL extention. First, design the architecture of IOT RESTful web services, the architecture is divided into six layers so that it can integrate The IOT and RESTful web services effectively. Second, we show how to invoke the RESTful web services from the IOT and publish a BPEL process as a RESTful web service by extending BPEL. Finally, through an experiment to verify the correctness and validity of the proposed method in this paper. Â© 2014 IEEE.",10.1109/IHMSC.2014.23,Internet of Things;RESTful Web Service;BPEL;Service Asynchronous Composition;IOT Architecture; Service-oriented architecture;Computer architecture;Drugs;Servers;Security;Educational institutions; Internet of Things;service-oriented architecture;Web services;Web Services Business Process Execution Language; IOT RESTful Web service asynchronous composition;BPEL;Business Process Execution Language;Internet of Things;service-oriented methodology,,1,1,,
,Validation and Interactivity of Web API Documentation,P. J. Danielsen; A. Jeffrey,"Many Web APIs (by which we mean ones using HTTP as the application protocol) do not publish a machine-readable API description (in a language such as WADL or WSDL) but only provide human-readable documentation, usually in HTML. This documentation may be machine-generated, or it may be hand-edited in which case there is the possibility of errors being introduced into the API description. In this paper we present a Web Interface Language (WIfL) vocabulary for API documentation, which is intended to be embedded in HTML using RDFa annotations. We present the semantics of WIfL, including a formal presentation of inheritance and validation. We discuss our WIfL tools, which include a dynamically generated console for interacting with an API's reference implementation, and a validator which can check an API for internal consistency.",10.1109/ICWS.2013.76,API;Web API;HTTP;Validation;Documentation; HTML;Documentation;Vocabulary;Protocols;XML;Resource description framework;Context; application program interfaces;hypermedia markup languages;Internet;knowledge representation languages; Web API documentation validation;Web API documentation interactivity;HTTP;application protocol;machine-readable API description;WADL;WSDL;human-readable documentation;HTML;Web Interface Language;WIfL vocabulary;RDFa annotations;WIfL semantics;formal presentation;WIfL tools;internal consistency,,1,1,,
,Sorting and persisting REST and SOAP client for MaaS based architecture,L. Mouhibbi; M. Elhozmari; A. Ettalbi,"Interoperability and the interactions between web-based applications over a network are treated using web services. To date, Web services remain indispensable for communication in constrained and Cloud Computing environments. Web service protocols are of two famous kind; REST web service used to handle Media data type in web based application, and SOAP web service used in academic or industry environment. The main objective of this paper is to improve a previously proposed middleware SaaS solution independent of users and environments [9] (on premise or constrained application, Cloud). The middleware is completed by adding three new components, ""Task Receiver"" Component for filtering client by ability, ""Task Sorter"" Component for sorting requests by prioritization, and ""Task Persister"" Component for persisting requests and preventing any data loss. This is to reach some benefits such as environment security and selectivity.",10.1109/ICMCS.2018.8525963,component;REST;SOAP;Cloud Computing;Interoperability;Sorting;Persisting; Cloud computing;Simple object access protocol;Task analysis;Computer architecture;Interoperability;Protocols; cloud computing;middleware;open systems;protocols;service-oriented architecture;Web services; academic industry environment;MaaS based architecture;Web service protocols;Web-based applications;media data type;REST Web service;SOAP Web service;middleware SaaS solution;task receiver component;task persister component;task sorter component;cloud computing;middleware as a service;software as a service;interoperability,,1,1,,
,An Analysis of Public REST Web Service APIs,A. Neumann; N. Laranjeiro; J. Bernardino,"Businesses are increasingly deploying their services on the web, in the form of web applications, SOAP services, message-based services, and, more recently, REST services. Although the movement towards REST is widely recognized, there is not much concrete information regarding the technical features being used in the field, such as typical data formats, how HTTP verbs are being used, or typical URI structure, just to name a few. In this paper, we go through the Alexa.com top 4000 most popular sites to identify precisely 500 websites claiming to provide a REST web service API. We analyze these 500 APIs for key technical features, degree of compliance with REST architectural principles (e.g., resource addressability), and for adherence to best practices (e.g., API versioning). We observed several trends (e.g., widespread JSON support, software-generated documentation), but, at the same time, high diversity in services, including differences in adherence to best practices, with only 0.8% of services strictly complying with all REST principles. Our results can help practitioners evolve guidelines and standards for designing higher quality services and also understand deficiencies in currently deployed services. Researchers may also benefit from the identification of key research areas, contributing to the deployment of more reliable services.",10.1109/TSC.2018.2847344,REST;RESTful;Web Services;API;HTTP;Web;Web Services Analysis; Best practices;Documentation;Standards;Simple object access protocol;XML;Analytical models; ; ,,1,1,,
,Network management system using web services and service oriented architecture - A case study,P. Rajesh; S. Ranjiith; P. R. Soumya; V. Karthik; S. Datthathreya,"This paper presents the design and implementation of a north bound interface framework for a network management system using the Web services (WS) and service oriented architecture (SOA) technologies. The primary goal of this project is to build a consistent programmatic interface for the operations supported by individual network management stations in the network. By using the recommended framework, a unified, consistent configuration control across devices can be obtained. The framework would also allow development of intelligent service oriented network configuration systems. This paper provides the architecture and design of the system and tries to present the lessons learnt during the process of developing the architecture. It also attempts to provide directions on applicability of Web services for managing network devices. The authors have ascertained that Web services using SOAP/XML is suitable for building distributed network management applications. Once network equipment vendors start implementing the basic NETCONF specification and other similar standards using the Web service/service oriented architecture, more robust and consistent systems can be built - this paves the way for future research and implementation of advanced management systems",10.1109/NOMS.2006.1687635,North bound API;SOA;SOAP;Web Services;XML;Axis;WSDL;WSDD;NETCONF; Web services;Service oriented architecture;Computer aided software engineering;Technology management;Paper technology;Intelligent networks;Buildings;Robustness;Semiconductor optical amplifiers;Web and internet services; computer network management;Internet;telecommunication control;XML; network management system;Web services;service oriented architecture;north bound interface framework;programmatic interface;configuration control;intelligent service oriented network configuration systems;network device management;SOAP;XML;distributed network management applications;NETCONF specification;advanced management systems,,1,1,,
,"Data bases available through APIs using Restify: Characteristics, programming models, and benchmarks [Banco de Dados disponÃ­vel por APIs usando Restify: CaracterÃ­sticas, Modelos de ProgramaÃ§Ã£o e AnÃ¡lise de Desempenho]","Marques, L F and Correia, R C M and Spadon, G and Eler, D M and Olivete-Jr, C and Garcia, R E","The volume of data exchanged by computer networks is gradually increasing over time, which provides the need for performance and interoperability between different platforms and systems. In this line, there are several studies dedicated to service-oriented software architectures and resource consumption models. However, a few of them are focused on the development of generic tools for the dynamic creation of data provisioning services. This article presents the analysis of a tool called Restify, which is able to dynamically create web services to provide an online database as a service. Restify achieved the system interoperability requirements regarding heterogeneous operations, programming languages, and server infrastructures. As a result, we observed that the performance of this tool was comparable, if not better, than other evaluated web services, such as REST and SOAP. Finally, Restify excels by behaving like an interface tool, allowing the management and integration of multiple online system tools with various relational databases. Â© 2017 AISTI.",10.23919/CISTI.2017.7975715,Web Service;REST;Database as a Service; Simple object access protocol;XML;Uniform resource locators;Tools;Computational modeling; application program interfaces;cloud computing;open systems;relational databases;service-oriented architecture;Web services; API;Restify;computer networks;service-oriented software architectures;resource consumption models;data provisioning services;online database as a service;system interoperability requirements;heterogeneous operations;programming languages;server infrastructures;Web services;REST;SOAP;interface tool;multiple online system tools;relational databases,,1,1,,
,Cyber security for service oriented architectures in a Web 2.0 world: An overview of SOA vulnerabilities in financial services,A. Masood,"Service oriented architecture is fast becoming ubiquitous enterprise software architecture standard in public and private sector alike. Study of literature and current attacks suggests that with the proliferation of Web API and RESTFul services, the attack vectors prioritized by OWASP top 10, including but not limited to cross site scripting (XSS), cross site request forgery (CSRF), injection, direct object reference, broken authentication and session management now equally apply to web services. In addition service oriented architecture relies heavily on XML/RESTFul web services which are vulnerable to XML Signature Wrapping Attack, Oversize Payload, Coercive parsing, SOAP Action Spoofing, XML Injection, WSDL Scanning, Metadata Spoofing, Oversized Cryptography, BPEL State Deviation, Instantiation Flooding, Indirect Flooding, WS-Addressing spoofing and Middleware Hijacking to name a few. In this paper, we review various such security issues pertaining to service oriented architecture. These and similar techniques, have been employed by Anonymous and other hacktivists, resulting in denial of service attacks on financial applications. While discussing the national security perils of hacktivism, there is an excessive focus on network layer security, and the application layer perspective is not always part of the discussion. In this research, we provide background information and rationale for securing application layer vulnerabilities to facilitate true defense in depth approach for cyber security.",10.1109/THS.2013.6698966,SOA;Service oriented architecture;Web services;cyber security;secure design;secure software development;security assessment;security awareness;Availability;Data security;Information security;Information systems;secure software development; Service-oriented architecture;XML;Simple object access protocol;Computer crime;Vectors; application program interfaces;financial data processing;security of data;service-oriented architecture;ubiquitous computing;Web services; cyber security;service oriented architectures;Web 2.0;SOA vulnerability;financial services;ubiquitous enterprise software architecture;public and private sector;Web API;RESTFul services;OWASP;cross site scripting;XSS;cross site request forgery;CSRF;direct object reference;broken authentication;session management;Web services;XML Web service;RESTFul Web service;XML signature wrapping attack;oversize payload;coercive parsing;SOAP action spoofing;XML injection;WSDL scanning;metadata spoofing;oversized cryptography;BPEL state deviation;instantiation flooding;indirect flooding;WS-addressing spoofing;middleware hijacking;denial of service attacks;financial applications;national security perils;hacktivism;network layer security;application layer perspective;background information;application layer vulnerability,,1,1,,
,Providing SOAP Web Services and RESTful Web Services from Mobile Hosts,F. AlShahwan; K. Moessner,Providing non interrupted Web Services from resource limited mobile devices in a light weight processing manner is a significant need. This paper takes a step towards achieving this goal. An implementation of two frameworks for providing Web Services from resource constraints devices is presented. The first framework is implemented to provide SOAP Web Services and the second one is implemented to provide RESTful Web Services. Each of those two frameworks has its own features and shortcomings. This paper provides a comparison between SOAP-based frameworks and RESTful-based frameworks. This comparison is carried out to allow us to decide on the framework that best suits mobile environment capabilities and fulfils our requirement of providing mobile Web Services continuously with a light weight processing requirement. This comparison is undertaken and analyzed using three different test scenarios. Our preliminary work shows that a RESTful-based MWSF is more suitable for mobile environments.,10.1109/ICIW.2010.33,RESTful-based MWSF;SOAP-based MWSF; Web services;Simple object access protocol;XML;Access protocols;Web and internet services;Uniform resource locators;Context awareness;Data security;Information security;Testing; access protocols;mobile computing;Web services; SOAP Web services;mobile device;RESTful Web services;MWSF;simple object access protocol;representational state transfer,,1,1,,
,DRWSC â To simplify dynamic invocation for RESTful Web services,Y. Chen; J. Li; Y. Lv; H. Qin; L. Zhang,"Dynamic invocation has always been a hot issue in Web services in order to take full advantage of the flexibility of services computing. One key underlying enabling technology is a self-descriptive contact between the service consumer and provider. In the SOAP-based environment, WSDL has been proven a successful description language which is widely accepted. But for many years, we cannot get the equivalent in the RESTful, another dominant style of Web services. Thanks for the announcement of WSDL 2.0 which has been designed with RESTful Web service in mind and became a recommend in 2007, developers can use it as the APIs for RESTful Web services which are attracting more and more attention of Web applications all over the world. Unfortunately, the vision is almost unfulfilled due to rare reference implementations. To fill the gap between the vision and practice, we present a useful tool for dynamically invoking RESTful Web services based on the information extracted from WSDL 2.0. Our implementation demonstrates the feasibility that dynamic invocations in general RESTful Web services can be done as easy as in SOAP-based ones.",10.1109/ICSESS.2010.5552413,WSDL 2.0;Web service;RESTful;SOAP;dynamic invocation; Simple object access protocol;Graphical user interfaces;Data mining;Service oriented architecture;Web sites; information retrieval;software architecture;Web services; DRWSC;dynamic invocation;RESTful Web service;services computing;service consumer;service provider;SOAP based environment;description language;information extraction;REpresentational State Transfer,,1,1,,
,Web service performance enhancement for portable devices modifying SOAP security principle,D. Chakroborti; S. S. Nath,"Nowadays most of the wed applications are bound to Service Oriented Architecture (SOA) [1], [11], [14] such as - inter-operable web services, and their performance and security greatly depend on the backend structure of web service. Web Service has two layers of security - message level security (WS-Security) and transport level security [18]. In WS-Security, embedding of security modules within SOAP message increases the line of code which lengthens the response time and thus decreases the overall performance of web services [13], [20]. Our experiments on different web services showed that, among three security modules of WS-Security of SOAP message, authentication module requires processing time the most, in Table I. Another essential part of web service is WSDL and security for WSDL is emphasized by few researchers recently as it is open to access and vulnerable for presenting SOAP messaging information [1], [4], [13]. Restricted access of WSDL file can play a strong role to increase the authentication and overall security of web service as in [4]. In this paper, we have proposed a new model to improve web service performance modifying the security principle of SOAP message and tethering WSDL file to facilitate authentication. Experimental results on our model have shown significant improvements in the line of code and response time over the traditional approach without compromising any WS-Security module's contrivances (Authentication, Signature, and Encryption).",10.1109/ICCITECHN.2017.8281799,Message level security;SOAP message;Web service performance;WSDL access;WS-Security; Simple object access protocol;Authentication;Performance evaluation;Encryption;Time factors; cryptography;security of data;service-oriented architecture;Web services;XML; inter-operable web services;transport level security;security modules;SOAP message;WS-Security module;web service performance enhancement;SOAP security principle;WSDL file;encryption module;signature module;authentication module;SOAP messaging information;service oriented architecture,,1,1,,
,Performance comparison of SOAP and REST based Web Services for Enterprise Application Integration,"Kumari, S and Rath, S K","Web Services are common means to exchange data and information over the network. Web Services make themselves available over the internet, where technology and platform are independent. Once web services are built it is accessed via uniform resource locator (URL) and their functionalities can be utilized in the application domain. Web services are self-contained, modular, distributed and dynamic in nature. These web services are described and then published in Service Registry e.g., UDDI and then they are invoked over the Internet. Web Services are basic Building blocks of Services Oriented Architecture (SOA). These web services can be developed based on two interaction styles such as Simple Object Access Protocol (SOAP) and Representational State Transfer Protocol (REST). It is important to select appropriate interaction styles i.e., either SOAP or REST for building Web Sevices. Choosing service interaction style is an important architectural decision for designers and developers, as it influences the underlying requirements for implementing web service solutions. In this study, the performance of application of web services for Enterprise Application Integration (EAI) based on SOAP and REST is compared. Since web services operate over network throughput and response time are considered as a metrics parameter for evaluation. Â© 2015 IEEE.",10.1109/ICACCI.2015.7275851,SOA;Web Service;EAI;SOAP;REST; Simple object access protocol;Time factors;Throughput;Service-oriented architecture;Buildings;Measurement; electronic commerce;service-oriented architecture;Web services; SOAP based Web services;REST based Web services;enterprise application integration;uniform resource locator;URL;service registry;services oriented architecture;SOA;Internet;simple object access protocol;representational state transfer protocol;EAI;network throughput;response time,,1,1,,
,The Importance of Web Services Using the RPC and REST Architecture,P. Mironela,"A Web service is a software application that can be accessed remotely using XML-based languages. It represents a communication interface offered by the server, through that the clients (programs on other systems) may require different information. The customer may vary, may be present on the same computer server, may be in the same local network or it may be located in the opposite part of the country. It is a method by which applications can communicate with each other through asynchronous messages or calls on remote procedure (RPC remote procedure call). So it can be concluded that a Web service is a software application that can be accessed remotely using XML-based languages. Web services are just two programs that change data between them on the Internet or Intranet in XML format called SOAP (simple object access protocol).",10.1109/ICCTD.2009.15,Web services;RPC;REST;XML;SOAP; Web services;Service oriented architecture;Web server;Application software;XML;Web and internet services;Simple object access protocol;Communication standards;Access protocols;Computer languages; protocols;Web services;XML; Web services;RPC architecture;REST architecture;XML-based languages;communication interface;computer server;remote procedure call;simple object access protocol;SOAP;Internet;Intranet;extended markup language,,1,1,,
,Semantic Web Annotation and Representation of Cloud APIs,G. Cretella; B. Di Martino,"In this paper we present an analysis of existing annotation techniques for semantic description of Application Programming Interfaces exposed as web services through SOAP or REST based protocol. We propose an original methodology and technique for semantic annotation of web APIs particularly taylored to Cloud APIs. In cloud scenario particularly important for the characterization of cloud services are the non functional requirements, such as the service level requests, offers to be matched for reach a Service Level Agreement (SLA) and offers. The technique we illustrate in this paper includes semantic description of such non functional requirement in addition to functional ones. Two case studies on semantically describing IBM and Amazon cloud APIs are provided, in the context of the Semantic Engine development for the mosaic European project.",10.1109/EIDWT.2012.61,Semantic Annotation;Cloud APIs;OWL;IBM SmartCloud;Amazon EC2;mOSAIC; Semantics;Ontologies;Cloud computing;Grounding;Simple object access protocol;Servers; application program interfaces;cloud computing;semantic Web;Web services; semantic Web annotation;Cloud API;semantic description;application programming interface;Web service;SOAP;REST based protocol;semantic annotation;Web API;nonfunctional requirement;service level request;service level agreement;SLA;IBM;Amazon cloud API;semantic engine development;mosaic European project,,1,1,,
,Integrating IMS with web services: To enable IP multimedia service oriented architectures,O. J. Bertin,"The IP multimedia subsystem has provided major advances for IP-based telecom infrastructures and services. The IMS core network enables a variety of IMS-compliant communications services to interoperate while being accessed through different kinds of access networks, preferably broadband. As both consumer and corporate users are by now used to access services, even communications services through the Web and Web-based communities and social networks, it is key for success of IMS-based services to be provided with efficient Web access, so users can benefit from those new services by using Web-based applications and user interfaces, not only IMS user equipments and SIP protocol. HP CMS has developed the mobile personal community broadcasting (MPCB) service, an IMS / Web 2.0 Live Group Video Share application that is an example of IMS video solution with strong Web 2.0 integration. The efficient integration of IMS and SOA architectures will be essential to achieve the desired goals. Both parlay-X standard WSDL should be supported as well as innovative Web 2.0 web services SDK. One of the key network elements in integrated IMS-SOA environments is the telecom Web services gateway (TWSG), exposing the rich IMS services to the SOA world in an efficient, secured and manageable manner.",10.1109/IMSAA.2008.4753920,IMS;Web 2.0;SOA;SIP;HTTP;WSDL;SOAP;REST;Parlay-X; Web services;Service oriented architecture;Telecommunications;Video sharing;Social network services;User interfaces;Access protocols;Collision mitigation;Multimedia communication;Broadcasting; IP networks;mobile communication;multimedia communication;multimedia computing;signalling protocols;subscriber loops;Web services; Web services;IP multimedia service oriented architectures;IP multimedia subsystem;IP-based telecom infrastructures;IMS core network;access networks;communications services;social networks;user equipments;SIP protocol;mobile personal community broadcasting service;IMS/Web 2.0 live group video share application;SOA architectures;parlay-X standard;telecom Web services gateway,,1,1,,
,QoS-based Discovery and Ranking of Web Services,E. Al-Masri; Q. H. Mahmoud,"Discovering Web services using keyword-based search techniques offered by existing UDDI APIs (i.e. Inquiry API) may not yield results that are tailored to clients' needs. When discovering Web services, clients look for those that meet their requirements, primarily the overall functionality and quality of service (QoS). Standards such as UDDI, WSDL, and SOAP have the potential of providing QoS-aware discovery, however, there are technical challenges associated with existing standards such as the client's ability to control and manage discovery of Web services across accessible service registries. This paper proposes a solution to this problem and introduces the Web service relevancy function (WsRF) used for measuring the relevancy ranking of a particular Web service based on client's preferences, and QoS metrics. We present experimental validation, results, and analysis of the presented ideas.",10.1109/ICCCN.2007.4317873,UDDI;Service Registries;Web Services;Quality of Service;QoS;Web Service Broker;Discovery of Web Services;Ranking of Web Services;Ranking; Web services;Quality of service;Delay;Throughput;Availability;Standards publication;Publishing;Information science;Simple object access protocol;Particle measurements; quality of service;Web services; QoS-based discovery;QoS-based ranking;quality of service;QoS-aware discovery;UDDI standard;WSDL standard;SOAP standard;Web service relevancy function;relevancy ranking,,1,1,,
,Segregating unique service object from multi-web sources for effective visualization,"Jayanthi, S K and Prema, S","Web services describe a standardized way of integrating Web-based applications using the XML (Extensible Markup Language), SOAP (Simple Object Access Protocol), WSDL and UDDI (Universal Description Discovery and Integration) open standards over an Internet protocol backbone. WSDL (Web Service Definition Language) is used for describing the available services. The dynamic approach starts with crawling on the Web for Web Services, simultaneously gathering the WSDL service descriptions and related documents. The Web APIs provide the methodology for building unique service objects from multiple web resources. In this semantic search engine, if the web user gets satisfied with the description they can crawl into the webpage, otherwise they can shift to another link. This query enhancement process is exploited to learn useful information that helps to generate related queries. In this research work the add-on is automatically generated when compared with the existing system. Add-on is programs that are integrated into the browser application, usually providing additional functionality. Finally this work gives an overview of how to segregate the unique service object (USO) using Bookshelf Data Structure from web resources and use it to semantically annotate the resulting services in visual mode. Â© 2012 IEEE.",10.1109/ICPRIME.2012.6208283,Book Shelf Data Structure;Unique Service Object (USO);Visualization;Web Services;WSDL; Data structures;Web pages;Web search;Pattern recognition;Informatics;Simple object access protocol; data visualisation;Web services; unique service object segregation;multi web sources;visualization;web services;XML;extensible markup language;SOAP;simple object access protocol;WSDL;UDDI;universal description discovery and integration;Internet protocol;web service definition language;web resources;semantic search engine;webpage,,1,1,,
,N-to-1 SOAP Requests Bundling for Efficient Software Service Delivery,"Li, F -L and Qian, C and Liu, W Y and Chi, C -H","One key factor towards the success of software and service is the standardization of service protocols/languages and the interoperability among them. While SOAP (Simple Object Access Protocol) is one such protocol for service message, its heavy performance overhead is often a big concern, as compared to the light-weighted REST (Representational State Transfer) and HTTP protocols. In this paper, we propose an innovative SOAP requests bundling mechanism to amortize service innovation overhead. This is done by performing serialization and de-serialization on one SOAP message for multiple requests. Details of this bundling mechanism, together with its supporting architecture are given. Our experimental results on TPCW show that the system throughput can be improved significantly, in the order of about 50% to about a few hundred percents. Â© 2009 IEEE.",10.1109/SERVICES-I.2009.109,Web Services;Performance;SOAP;Request Bundling; Simple object access protocol; software engineering;transport protocols;Web services; software service delivery;service languages;service protocols;simple object access protocol;service message;representational state transfer;HTTP protocols;SOAP requests bundling mechanism;service innovation overhead;SOAP message,,1,1,,
,Service Composition for REST,"Haupt, F and Fischer, M and Karastoyanova, D and Leymann, F and Vukojevic-Haupt, K","One of the key strengths of service oriented architectures, the concept of service composition to reuse and combine existing services in order to achieve new and superior functionality, promises similar advantages when applied to resources oriented architectures. The challenge in this context is how to realize service composition in compliance with the constraints defined by the REST architectural style and how to realize it in a way that it can be integrated to and benefit from existing service composition solutions. Existing approaches to REST service composition are mostly bound to the HTTP protocol and often lack a systematic methodology and a mature and standards based realization approach. In our work, we follow a comprehensible methodology by deriving the key requirements for REST service composition directly from the REST constraints and then mapping these requirements to a standard compliant extension of the BPEL composition language. We performed a general requirements analysis for REST service composition, defined a meta model for a corresponding BPEL extension, realized this extension prototypically and validated it based on a real world use case from the eScience domain. Our work provides a general methodology to enable REST service composition as well as a realization approach that enables the combined composition of WSDL and REST services in a mature and robust way. Â© 2014 IEEE.",10.1109/EDOC.2014.24,REST;service composition;BPEL;eScience;simulation workflow; Context;Servers;Standards;Service-oriented architecture;Unified modeling language;Computer architecture; formal specification;formal verification;natural sciences computing;service-oriented architecture;software reusability;Web Services Business Process Execution Language; service oriented architectures;service reuse;REST architectural style;REST service composition;REST constraints;BPEL composition language;requirements analysis;meta model;BPEL extension;eScience domain,,1,1,,
,Towards restful web service composition for healthcare domain,"Sumithra, R P and Sarath, R","Service Oriented Architecture (SOA) has been widely adopted by industries due to its ability to provide increased inter operability among heterogeneous systems. SOA is realized through web services which can be either based on the style of Remote Procedure call(RPC) and SOAP protocol or on the Representational State Transfer(REST) style and HTTP. RESTful web services are increasingly becoming popular in the industry because of their simplicity, uniform interface, statelessness and cacheability benefits. The ability to efficiently select and integrate appropriate heterogeneous services available on the web dynamically at runtime is essential in the development of the applications based on web services. Whenever a single web service cannot satisfy the functionality required by the user, there should be a possibility to combine several existing services together in order to fulfill the request. This need has triggered a considerable number of research efforts on the composition of web services. Although several works have focused on the composition of SOAP based web services, there has not been adequate effort towards the composition of RESTful services. However, due to the above- mentioned advantages offered by the RESTful web services, it will be beneficial to design an application as a composition of such RESTful services. Towards this objective, this paper investigates two different approaches for composing the REStful web services specifically designed for health care domain, one using the J opera tool and another using hyper media. Â© 2015 IEEE.",10.1109/ICCICCT.2015.7475397,REST Jopera;Hypermedia;Composition; Surgery;Schedules;Protocols;Hospitals;Service-oriented architecture; health care;service-oriented architecture;user interfaces;Web services; Web service composition;healthcare domain;service oriented architecture;SOA;interoperability;remote procedure call;RPC;SOAP protocol;representational state transfer style;REST style;RESTful Web services;cacheability benefits;SOAP-based Web services;Jopera tool,,1,1,,
,A Flexible Transformation Scheme between the 'OR' of BPMN and 'Link' of BPEL,L. Bai; J. Wei,"BPMN and BPEL are two process modeling languages with different syntax and semantics. Overriding their gaps to improve interoperability is one of the key issues in current service computing research. Recent works about the transformation between BPMN and BPEL mostly focus on a limited set of elements or well-formed structures. This paper expands the traditional methods by considering the multi-semantic element dasiaORpsila of BPMN and the non-structured element dasiaLinkpsila of BPEL. Furthermore, we present a flexible transformation scheme for them based on semantics equivalence and we finally designed and developed a prototype tool to implement our strategy. Our work is of great significance in relaxing the restriction on transformation between BPMN and BPEL and thus satisfying more business requirements.",10.1109/APSCC.2008.147,; Web services;Natural languages;Prototypes;Computer languages;Engines;Algorithm design and analysis;Process design; business data processing;program interpreters;programming language semantics;specification languages; flexible transformation scheme;BPMN;BPEL;business process modeling notation;business process execution language;multisemantic element;nonstructured element;semantic equivalence;business requirements,,1,1,,
,Static analysis for web service security - Tools &amp; techniques for a secure development life cycle,A. Masood; J. Java,"In this ubiquitous IoT (Internet of Things) era, web services have become a vital part of today's critical national and public sector infrastructure. With the industry wide adaptation of service-oriented architecture (SOA), web services have become an integral component of enterprise software eco-system, resulting in new security challenges. Web services are strategic components used by wide variety of organizations for information exchange on the internet scale. The public deployments of mission critical APIs opens up possibility of software bugs to be maliciously exploited. Therefore, vulnerability identification in web services through static as well as dynamic analysis is a thriving and interesting area of research in academia, national security and industry. Using OWASP (Open Web Application Security Project) web services guidelines, this paper discusses the challenges of existing standards, and reviews new techniques and tools to improve services security by detecting vulnerabilities. Recent vulnerabilities like Shellshock and Heartbleed has shifted the focus of risk assessment to the application layer, which for majority of organization means public facing web services and web/mobile applications. RESTFul services have now become the new service development paradigm normal; therefore SOAP centric standards such as XML Encryption, XML Signature, WS-Security, and WS-SecureConversation are nearly not as relevant. In this paper we provide an overview of the OWASP top 10 vulnerabilities for web services, and discuss the potential static code analysis techniques to discover these vulnerabilities. The paper reviews the security issues targeting web services, software/program verification and security development lifecycle.",10.1109/THS.2015.7225337,Static Code Analysis;RESTFul API;SOA;Web Services;Cyber Security;Secure Design;Secure Software Development;SOAP;Source Code Analysis;Security Code Review;Static Analysis Tool;Service Oriented Architecture;Web Services Security;Web Application security;Penetration Testing; Simple object access protocol;XML;Testing;Computer crime;Cryptography; program diagnostics;program verification;security of data;Web services; Heartbleed;risk assessment;Web applications;mobile applications;RESTFul services;service development paradigm;SOAP centric standards;XML encryption;XML signature;WS-security;WS-SecureConversation;static code analysis;software verification;program verification;Shellshock;vulnerabilities detection;services security;Web services guidelines;Open Web Application Security Project;OWASP;national security and industry;dynamic analysis;vulnerability identification;software bugs;mission critical API;public deployments;Internet scale;information exchange;strategic components;security challenges;enterprise software ecosystem;service-oriented architecture;public sector infrastructure;critical national infrastructure;Internet of Things;ubiquitous IoT;secure development life cycle;Web service security,,1,1,,
,SOAP-Based vs. RESTful Web Services: A Case Study for Multimedia Conferencing,F. Belqasmi; J. Singh; S. Y. Bani Melhem; R. H. Glitho,RESTful Web services are now emerging as an alternative to SOAP-based Web services and might be a more suitable choice in some cases. A comparison of two Web programming interfaces - the standard Parlay-X multimedia SOAP-based Web service and a RESTful Web service that offers the same functionalities - for developing multimedia conferencing applications shows that the RESTful Web interface offers better performance.,10.1109/MIC.2012.62,Media;Servers;Multimedia communication;Logic gates;Simple object access protocol;Computer architecture;Internet computing;SOAP-based Web services;RESTful Web services;multimedia conferencing;Parlay-X Web services; Media;Servers;Multimedia communication;Logic gates;Simple object access protocol;Computer architecture;Web and internet services; multimedia computing;Web services; restful Web services;Parlay-X multimedia SOAP-based Web service;multimedia conferencing applications,,1,1,,
,Binding Optimization of Web Services: A Quantitative Study of Local Repository-Based Approach,J. Kouki; W. Chainbi; K. Ghedira,"The number of Web services has substantially increased in response to the needs of business activities. Moreover, toolsets and APIs ensuring the easy development and deployment of these services have emerged. As a result, the number of registries holding the great deal of Web services has also increased. Therefore, binding these services, whenever the user needs to reuse them, is time and effort consuming. To cope with this problem and in response to the limits of current approaches, we propose a local repository-based approach to optimize the binding of the frequently used Web services. Furthermore, an experimental study is presented to situate the proposed approach to other ones dealing with the binding feature of Web services.",10.1109/ICWS.2012.110,Web Services Architecture;UDDI;SOA;Binding Web Services; Engines;Optimization;Educational institutions;Search engines;Business;Service oriented architecture; application program interfaces;business data processing;Web services; Web services;service binding optimization;local repository-based approach;business activity;toolset;API;application program interface;service development;service deployment;user reuse;Web service binding feature,,1,1,,
,Critics Say Web Services Need a REST,G. Goth,"A vocal group of developers critical of the orthodox Web Services stack is touting the use of a technology called REST, or Representational State Transfer Web Services. REST advocates a more streamlined (and familiar) XML-over-HTTP approach for exposing software functionality. Here are some of the issues being debated.",10.1109/MDSO.2004.35,Representational State Transfer Web Services;REST;Web Services;stack;SOAP; Web services;Simple object access protocol;Service oriented architecture;Web and internet services;Representational state transfer;Writing;Web sites;Scalability;Sparks; ; Representational State Transfer Web Services;REST;Web Services;stack;SOAP,,1,1,,
,Software service architecture to access weather data using RESTful web services,"Ramanathan, R and Korte, T","The field of application where sensors are used is expanding extensively fast. The ease of using these sensors is increasing as much as their variety. Generally, sensors provide information about various aspects of the real world. Sensors are used for gathering environmental information such as changes in temperature, air pressure, water quality. Sensors are also used widely in diagnosing automobiles, traffic patterns, health care and disaster management. The important task is to analyze the large amount of multidimensional data generated by diverse sensors and interoperability among various system which handles such complex data. These sensors are distributed geographically and these sensor networks do not take context information into account due to which they provide heterogeneous interfaces to access the data. To handle these issues we need to give greater importance to the interoperability of the data acquired from heterogeneous and distributed network of sensors. In this paper, we are going to propose an architecture using which the sensor data can be exposed as a service over the web. Our architecture will also take the user location into account in order to provide weather data from the nearest available sensors. We are going to use RESTful web services as it is simple, reliable and easily scalable. We are also going to use a document oriented NoSQL database. This paper also provides a detailed analysis and comparison between RESTful web services and WSDL/SOAP based web services. Â© 2014 IEEE.",10.1109/ICCCNT.2014.6963122,SOA;Webservices;SOAP;REST;NoSQL;JSON;Service Oriented Architecture;GeoSpatial Application; Simple object access protocol;Service-oriented architecture;Sensors;Computer architecture;Meteorology;XML; geophysics computing;meteorology;open systems;service-oriented architecture;Web services; software service architecture;weather data;RESTful Web services;environmental information;temperature changes;air pressure;water quality;automobiles;traffic patterns;health care;disaster management;multidimensional data;interoperability;document oriented NoSQL database;WSDL-SOAP based Web services,,1,1,,
,Towards Automatic Discovering for a Real-World RESTful Web Service,Q. Liu; C. Liu; H. Li; X. Xu; L. Gao,"Web services have been emerging and are by now one of the most popular techniques for building versatile distributed systems. With the increasing popularity of the Restful Web services on the network, how to select the real-world Restful Web services accurately from the ordinary web pages, thus increase the need for services discovering. In this paper, based on the researches of the SOAP-based Web services and Restful services, we develop a service pattern discovery system for the Restful Web services, and introduce the research on the service feature selecting and services classification.",10.1109/WISA.2012.35,REST;Web Services;Pattern;Classification; Web services;Feature extraction;Web pages;XML;Standards;Analysis of variance; pattern classification;Web services;Web sites; automatic discovery;real-world RESTful Web service;versatile distributed systems;Web pages;SOAP-based Web services;services classification;service feature selection,,1,1,,
,Data-Driven Workflows for Microservices: Genericity in Jolie,L. Safina; M. Mazzara; F. Montesi; V. Rivera,"Microservices is an architectural style inspired by service-oriented computing that has recently started gainingpopularity. Jolie is a programming language based on the microservices paradigm: the main building block of Jolie systems are services, in contrast to, e.g., functions or objects. The primitives offered by the Jolie language elicit many of the recurring patterns found in microservices, like load balancers and structured processes. However, Jolie still lacks some useful constructs for dealing with message types and data manipulation that are present in service-oriented computing. In this paper, we focus on the possibility of expressing choices at the level of data types, a feature well represented in standards for Web Services, e.g., WSDL. We extend Jolie to support such type choices, and enable Jolie processes to act on data generically (without knowing which type it has in the choice). We show the impact of our implementation on some of the typical scenarios found in microservice systems. This shows how computation can move from a process-driven to a data-driven approach, and leads to the preliminary identification of recurring communication patterns that can be shaped as design patterns.",10.1109/AINA.2016.95,Microservices;data-driven workflow;Jolie;genericity; Programming;Computer languages;Computer architecture;Servers;Protocols;Syntactics;Calculus; database languages;high level languages;service-oriented architecture;Web services;workflow management software; data-driven workflows;microservices;architectural style;service-oriented computing;programming language;Jolie systems;Jolie language;data manipulation;Web services,,1,1,,
,Web Services Integration on Data Mining Based on SOA,J. Li; B. Song,"Data mining and scoring tool providers require users to use provider-specific ways to invoke their services. The provider-specific approach could be a major factor affecting why data mining tools and applications are not currently as widespread as one might hope. However, SOA can implements the loose coupling between the services provider and services consumer. Using Web service protocol (such as SOAP, WSDL and UDDI), the data mining task can be encapsulated into a standard Web services. Services consumer can dynamically bound different services provider based on Web services, which implements the integration of data mining applications with data mining and scoring tool. The Java Data Mining API (JDM) is the first attempt to create a standard Java API to access data-mining tools from Java applications. A new service discovery model where quality of service is taken as constraints when searching for Web services would give some confidence to the Web service consumers about the quality of the service they are about to invoke.",10.1109/IPTC.2010.147,servcice oriented architecture;web services;java data mining;service integration;quality of service; Data mining;Quality of service;Service oriented architecture;Java;Data models;Simple object access protocol; application program interfaces;data mining;Java;service-oriented architecture;Web services; Web services;data mining;SOA;service provider;service consumer;Java;API;service oriented architecture,,1,1,,
,Towards a RESTful service ecosystem: Perspectives and challenges,"Lanthaler, M and GÃ¼tl, C","Average information workers spend most of their time for searching, analyzing, reformatting and consolidating information. The recent advent of service-oriented architectures (SOA) built on Web services is a first attempt to streamline respectively automate those tasks in order to increase productivity. SOAP-based services work well within a company and are thus mainly used to for the integration of legacy systems which have not been built to be Web-friendly or to make new systems more flexible for changing requirements in business ecosystems. Nevertheless, the utopian promise of uniform service interface standards, metadata and universal service registries, in the form of the SOAP, WSDL and UDDI standards have proven elusive. Instead, for Internet-scale applications, lightweight REST-based architectures which gained a lot of momentum recently provide a number of important advantages such as better scalability, reliability and visibility and are thus the preferred choice for Internet-scale applications. Despite the foreseeable potential, the increasing interest on and growing acceptance of lightweight services, there are still problems on formal describing, finding and orchestrating services as well as a lack of a holistic framework covering the entire service lifecycle. This paper focuses on an extensive survey comparing the traditional SOAP-based architecture to the emergent lightweight REST-based architectural style as a first step towards a framework proposal. Â© 2010 IEEE.",10.1109/DEST.2010.5610644,Autonomic computing;Internet;Web services;semantic Web services;service discovery;service composition;service orchestration and choreography;Web 2.0;Web 3.0; Semantics;XML;Simple object access protocol;Servers;Ecosystems;Biological system modeling; Internet;software architecture;software maintenance;Web services; RESTful service ecosystem;information workers;service oriented architectures;Web services;SOAP based services;legacy systems;WSDL;UDDI standards;Internet scale applications;REST based architectures,,1,1,,
,"On the origin of services - Using RIDDL for description, evolution and composition of RESTful services","Mangler, J and Beran, P P and Schikuta, E","WSDL as a description language serves as the foundation for a host of technologies ranging from semantic annotation to composition and evolution. Although WSDL is well understood and in widespread use, it has its shortcomings which are partly imposed by the way how the SOAP protocol works and is used. Cloud computing fostered the rise of Representational State Transfer (REST), a return to arguably simpler but more flexible ways to expose services solely through the HTTP protocol. For RESTful services many achievements that have been acquired have to be rethought and reapplied. We perceive that one of the biggest hurdles is the lack of a dedicated and simple yet powerful language to describe RESTful services. In this paper we want to introduce RIDDL, a flexible and extensible XML based language that not only allows to describe services but also covers the basic requirements of service composition and evolution to provide a clean foundation for further developments. Â© 2010 IEEE.",10.1109/CCGRID.2010.126,RESTful;Composition;Evolution;Description; Simple object access protocol;XML;Representational state transfer;Grid computing;Computer science;Cloud computing;Natural languages;Visualization;Skeleton;Automatic testing; specification languages;Web services; RIDDL;RESTful services;WSDL;description language;semantic annotation;SOAP protocol;cloud computing;representational state transfer;HTTP protocol;XML based language,,1,1,,
,Mining accurate message formats for service APIs,"Hossain, M A and Versteeg, S and Han, J and Kabir, M A and Jiang, J and Schneider, J -G","APIs play a significant role in the sharing, utilization and integration of information and service assets for enterprises, delivering significant business value. However, the documentation of service APIs can often be incomplete, ambiguous, or even non-existent, hindering API-based application development efforts. In this paper, we introduce an approach to automatically mine the fine-grained message formats required in defining the APIs of services and applications from their interaction traces, without assuming any prior knowledge. Our approach includes three major steps with corresponding techniques: (1) classifying the interaction messages of a service into clusters corresponding to message types, (2) identifying the keywords of messages in each cluster, and (3) extracting the format of each message type. We have applied our approach to network traces collected from four real services which used the following application protocols: REST, SOAP, LDAP and SIP. The results show that our approach achieves much greater accuracy in extracting message formats for service APIs than current state-of-art approaches. Â© 2018 IEEE.",10.1109/SANER.2018.8330215,Service mining;message format;message trace;entropy;keyword identification; Protocols;Data mining;Payloads;Documentation;Clustering algorithms;Software;Australia; application program interfaces;data mining;message passing; business value;fine-grained message format mining;message format extraction;service assets;API-based application development efforts;interaction message classification;network trace collection;REST;SOAP;LDAP;SIP;service APIs;application protocols;interaction traces,,1,1,,
,"Modelling microservices in email-marketing concepts, implementation and experiences",M. E. BrÃ¼ggemann; R. Vallon; A. Parlak; T. Grechenig,"Our experience with email-based marketing campaigns (or short: âMicroservicesâ) showed that they are an intersecting set of a) projects and processes and b) technology and creativity. Their properties of fixed due date, fixed scope and at the same time fixed duration render classical management methodologies unfeasible. The same applies to the supporting enterprise infrastructure architecture, where ad-hoc changes lead to a loss of stability and performance. The remedy was found in Model-Driven Engineering; a choreography for Microservices helped to indicate improvement opportunities for both the architecture and the information flow within, which in turn increased throughput.",,MDE;Model-Driven Engineering;Enterprise Modelling;Microservices;Email-Marketing;BPMN; Object oriented modeling;Computer architecture;Business;Software;Context;Biological system modeling;Planning; ; ,,1,1,,
,Performance analysis of a 2-tier caching proxy system for mobile RESTful services,I. Ollite; N. Mohamudally,"With the increasing use of smartphones and mobile applications, users access the Internet from everywhere using mobile networks. Different applications require different connectivity types or amount of data and a slow network can lead to a drastic degradation in performance. These applications usually access data on servers which are also accessible via other technologies such as websites, web service consumption or RESTful services on non-mobile clients and to ensure the same service, a single application programming interface (API) is provided. When mobile users access these services, the same traditional techniques such as SOAP based web services or RESTful services are used but these are not always appropriate. Similarly, the use of current web caching methods do not provide the same performance gain when HTTP based RESTful services are called from mobile devices. This paper proposes a 2-tier caching proxy system, which can be easily deployed and used by producers and consumers of RESTful services. This system has been implemented and tested using a live system and performance evaluation showed that a performance gain of up to 59% can be achieved along with a bandwidth reduction of 70% for service providers and 86% for clients.",10.1109/EUROCON.2015.7313716,Caching;Mobile Applications;Mobile Communication;Mobile Web Service;Proxy Architecture;Performance Evaluation;RESTful Services; Servers;Mobile handsets;Bandwidth;Time factors;Mobile communication;Web services;Protocols; application program interfaces;cache storage;mobile computing;Web services; performance analysis;mobile RESTful services;smartphones;mobile applications;Internet;mobile networks;connectivity types;Websites;Web service consumption;nonmobile clients;application programming interface;API;mobile users;SOAP based Web services;Web caching methods;HTTP based RESTful services;mobile devices;2-tier caching proxy system,,1,1,,
,Towards Automated RESTful Web Service Composition,"Zhao, H and Doshi, P","Emerging as the popular choice for leading Internet companies to expose internal data and resources, RESTful Web services are attracting increasing attention in the industry. While automating WSDL/SOAP based Web service composition has been extensively studied in the research community, automated RESTful Web service composition in the context of service-oriented architecture (SOA), to the best of our knowledge, is less explored. As an early paper addressing this problem, this paper discusses the challenges of composing RESTful Web services and proposes a formal model for describing individual Web services and automating the composition. It demonstrates our approach by applying it to a real-world RESTful Web service composition problem. This paper represents our initial efforts towards the problem of automated RESTful Web service composition. We are hoping that it will draw interests from the research community on Web services, and engage more researchers in this challenge. Â© 2009 IEEE.",10.1109/ICWS.2009.111,RESTful Web services;composition;modeling; Web services;Simple object access protocol;Service oriented architecture;Lead;Web and internet services;Encapsulation;Scalability;Computer science;Computer industry;Context-aware services; software architecture;Web services; automated RESTful Web service composition;Internet companies;WSDL-SOAP;service-oriented architecture,,1,1,,
,Exploring SOAP and REST communication on the Android platform,"Bloebaum, T H and Johnsen, F T","The usage of smart devices, such as phones and tablets, is becoming a more integral part of military information systems. The applications running on these systems need to exchange information with services running elsewhere in the information infrastructure. Many of these systems use SOAP Web services as their information exchange interface, but this technology is not natively supported on Android, the most common operating system for smart devices. Android does however have native support for REST, but this is not directly interoperable with SOAP Web services. In this paper we investigate the performance of both SOAP and REST Web services on Android, and find that while REST services consume less power, SOAP Web services give better responsiveness. Â© 2015 IEEE.",10.1109/MILCOM.2015.7357509,Web services;SOAP;REST;Android; Simple object access protocol;Smart phones;Servers;Performance evaluation;Batteries; Android (operating system);military communication;military computing;open systems;smart phones;Web services; Android platform;REST communication;SOAP communication;smart devices;military information system;information infrastructure;SOAP Web services;information exchange interface;operating system;interoperability;REST Web services,,1,1,,
,Service-Oriented Architecture and Legacy Systems,"Serrano, N and Hernantes, J and Gallardo, G","Enterprise systems are quickly evolving from monolithic silos to distributed applications with service-oriented flexible usage schemes. To keep up, IT organizations must adapt their legacy systems to meet changing business challenges almost in real time, with no second chances. Service-oriented architectures (SOAs) have evolved to flexibly operate and federate business processes and underlying systems. Authors Nicolas Serrano, Josune Hernantes, and Gorka Gallardo provide an overview of current SOA technologies and how to evolve in legacy environments. Â© 1984-2012 IEEE.",10.1109/MS.2014.125,software engineering;SOA;service-oriented architecture;cloud computing;Web services;APIs;legacy systems;systems integration;HTTP;SOAP;REST; Service-oriented architecture;Simple object access protocol;Software engineering;Legacy systems; service-oriented architecture;software maintenance; service-oriented architecture;legacy systems;enterprise systems;service-oriented flexible usage schemes;IT organizations;information technology;SOA;legacy environment,,1,1,,
,Daios: Efficient Dynamic Web Service Invocation,P. Leitner; F. Rosenberg; S. Dustdar,"Systems based on the service-oriented architecture (SOA) paradigm must be able to bind to arbitrary Web services at runtime. However, current service frameworks are predominantly used through precompiled service-access components, which are invariably hard-wired to a specific service provider. The Dynamic and Asynchronous Invocation of Services framework is a message-based service framework that supports SOA implementation, allowing dynamic invocation of SOAP/WSDL-based and RESTful services. It abstracts from the target service's internals, decoupling clients from the services they use.",10.1109/MIC.2009.57,service-oriented architecture;Web services;WSDL;REST;dynamic invocation;Web Services Description Language;Representational State Transfer; Web services;Service oriented architecture;Runtime;Java;Computer architecture;Quality of service;Message service;Simple object access protocol;Abstracts;Encoding; software architecture;Web services;XML; Daios;dynamic Web service invocation;service-oriented architecture;precompiled service-access components;asynchronous invocation;SOAP;RESTful services;WSDL,,1,1,,
,Revising WSDL Documents: Why and How,M. Crasso; J. M. Rodriguez; A. Zunino; M. Campo,"Although Web service technologies promote reuse, Web Services Description Language (WSDL) documents that are supposed to describe the API that services offer often fail to do so properly. Therefore, finding services, understanding what they do, and reusing them are challenging tasks. The authors describe the most common errors they've found in real WSDL documents, explain how these errors impact service discovery, and present some guidelines for revising them.",10.1109/MIC.2010.81,Web services publishing;Web services modeling;services discovery process and methodology;Web Services Description Language;WSDL; Web services;Documentation;XML;Guidelines;Search engines;Contracts;Access protocols;Publishing;Blogs;Service oriented architecture; application program interfaces;document handling;Web services;XML; WSDL documents;Web service technology;Web services description language;API;service discovery;XML,,1,1,,
,Evolution of web services in EOSDIS â Search and order metadata registry (ECHO),A. Mitchell; H. Ramapriyan; D. Lowe,"During 2005 through 2008, NASA defined and implemented a major evolutionary change in the earth observing system data and information system (EOSDIS) to modernize its capabilities. This implementation was based on a vision for 2015 developed during 2005. The ?EOSDIS 2015 Vision? emphasizes increased end-to-end data system efficiency and operability; increased data usability; improved support for end users; and decreased operations costs. One key feature of the evolution plan was achieving higher operational maturity (ingest, reconciliation, search and order, performance, error handling) for the NASA's Earth Observing System Clearinghouse (ECHO). The ECHO system is an operational metadata registry through which the scientific community can easily discover and exchange NASA's Earth science data and services. ECHO contains metadata for 2, 726 data collections comprising over 87 million individual data granules and 34 million browse images, consisting of NASA's EOSDIS Data Centers' and the United States Geological Survey's Landsat Project holdings. ECHO stores metadata from a variety of science disciplines and domains, including climate variability and change, carbon cycle and ecosystems, earth surface and interior, atmospheric composition, weather, and water and energy cycle. ECHO provides a platform for the publication, discovery, understanding and access to NASA's Earth observation resources (data, service and clients). In their native state, these data, service and client resources are not necessarily targeted for use beyond their original mission. However, with the proper interoperability mechanisms, users of these resources can expand their value, by accessing, combining and applying them in unforeseen ways. ECHO provides access to its capabilities through a set of services. These ECHO applications program interfaces (APIs) are based on industry standards for performing Web-based computing, specifically Web services profile.",10.1109/IGARSS.2009.5417653,Earth Science;ECHO;EOS;EOSDIS;Web Services;metadata;WSDL;SOA;SOAP; Web services;Geoscience;NASA;Information systems;Data systems;Usability;Costs;Earth Observing System;Geology;Satellites; application program interfaces;geology;geophysics computing;meta data;Web services; Web service;EOSDIS;metadata registry;earth observing system data and information system;Earth Observing System Clearinghouse;ECHO system;interoperability mechanism;application program interface;API,,1,1,,
,Compose Real Web Services with Context,"Luo, S and Xu, B and Sun, K","Web service composition is to integrate existing web services to provide a compound service which satisfies specified requirement. However, traditional web service compositions fail to provide different compound services under various scenarios. In this paper, we propose an approach to compose services with context. A context ontology is defined to describe the scenario for user. An abstract service description is defined to describe current three kinds of services including WSDL/Restful/Web API. The goal is to correlate context and service composition to improve the quality of the compound service from real services. Â© 2010 IEEE.",10.1109/ICWS.2010.63,; Context;Ontologies;Compounds;Measurement;Time factors;Simple object access protocol; ontologies (artificial intelligence);software architecture;Web services; Web service composition;context ontology;abstract service description;WSDL;Restful;Web API,,1,1,,
,"A Multi-protocol Bioinformatics Web Service: Use SOAP, Take a REST or Go with HTML",M. Pagni; J. Hau; H. Stockinger,"Web services are fundamental building blocks for Service Oriented Architectures and Grid computing that are applied in many scientific domains such as bioinformatics. We have designed and implemented a multi-protocol and multifunctional Web service that supports today's most important industry standards. We show an actual implementation of a bioinformatics database application: HitKeeper, that is now enhanced by programmable Web services interfaces as well as HTML-form based Web access. In this way, a wide range of biologists and bioinformaticians are addressed. We also satisfy an important recent requirement in the e-science community.",10.1109/CCGRID.2008.28,Web services;SOAP;REST;bioinformatics; Bioinformatics;Web services;Simple object access protocol;HTML;Service oriented architecture;Grid computing;Computer languages;Software tools;Packaging;Java; biology computing;grid computing;hypermedia markup languages;Web services; multiprotocol bioinformatics;SOAP;REST;HTML;service-oriented architectures;grid computing;bioinformatics database application;HitKeeper;programmable Web services interfaces;e-science,,1,1,,
,Providing Interoperability for Resource Access Using Web Services,"Lim, N and Majumdar, S and Nandy, B","This paper focuses on resource virtualization and interoperability required in the context of large distributed environments such as clouds and grids in which shared resources located on multiple sites are accessed by multiple users. A resource is exposed as a Web service. Techniques for handling two types of resources, a computing resource and a database resource are described. Two different Web service technologies, one based on SOAP and the other on REST are experimented with. A comparison of the two technologies including a performance comparison of two implementations (one using SOAP-based Web services and the other using RESTful Web services) of a computing system exposed as a Web service is presented. Â© 2010 IEEE.",10.1109/CNSR.2010.23,SOAP;REST;RESTful Web services;Web 2.0;Web services.; Web services;Resource virtualization;Simple object access protocol;Clouds;Bandwidth;Collaboration;User interfaces;Application software;Service oriented architecture;Civil engineering; grid computing;open systems;resource allocation;software architecture;virtual machines;Web services; interoperability;resource access;Web services;resource virtualization;large distributed environments;cloud environment;grid environment;computing resource;database resource;SOAP technology;REST technology;service oriented architecture;representational state transfer,,1,1,,
,Service-Oriented Multi-tenancy (SO-MT): Enabling Multi-tenancy for Existing Service Composition Engines with Docker,"Nikol, G and Trager, M and Harrer, S and Wirtz, G","In Web Services-based SOAs, BPEL 2.0 is the choice for defining services by composing existing ones. BPEL-based services can be directly executed on BPEL engines. With the rise of the cloud, companies aim to outsource service hosting to cloud providers. To achieve economies of scale, a cloud provider must host such services with minimal resources and keep the services from different tenants isolated. But BPEL engines typically do not support multi-tenancy. As a result, a vendor either has to extend the engine himself or host every service on its own (virtual) machine, thereby using either costly development or computing resources. Our approach solves this problem by hosting each service in its own isolated and minimal container which exposes the management functionality through APIs enabling complex multi-tenancy features or horizontal scaling on top. We aim to implement this by a) leveraging Docker container to isolate the services from each other, b) removing unused software from the container, c) starting the BPEL engine with minimal resources, and d) extracting management functionality while keeping management APIs. Our case study with Apache ODE shows that we can save significant runtime resources with only minor development effort. While this approach helps in moving SOAs into the cloud, it can also be leveraged to build resource efficient BPEL-based microservices cheaper. Â© 2016 IEEE.",10.1109/SOSE.2016.40,container;isolation;Docker;multi-tenancy; Runtime;Containers;Engines;Java;Cloud computing;Linux; cloud computing;service-oriented architecture;virtual machines;Web services;Web Services Business Process Execution Language; service-oriented multitenancy;SO-MT;service composition engines;Web services-based SOA;BPEL 2.0;BPEL-based services;BPEL engines;cloud providers;economies of scale;virtual machine;computing resources;management functionality;Docker container;Apache ODE;runtime resources;service-oriented architecture;Business Process Execution Language,,1,1,,
,RESTful Web Service integration using Android platform,"Bohara, M H and Mishra, M and Chaudhary, S","Internet is providing the platform for accessing different kinds of services in a distributed and heterogeneous environment. Software components are available on Internet in the form of Web Services. Service Oriented Architecture (SOA) possesses various characteristics by executing Web Services using Simple Object Access Protocol (SOAP). SOAP has certain limitations such as tightly coupled invocation, performance in terms of response data, non-uniform interface and no hyperlink support. These limitations can be resolved by implementing principles of Representational State Transformation (REST). REST is an architectural style implemented by resources known as RESTful Web Services. At present, light-weight RESTful services are dominating the development of services due to simplicity of RESTful architecture. Service access and invocation is simple in RESTful framework as it uses Uniform Resource Identifier (URIs) and Hyperlinks. In this paper, we explore the idea of RESTful Service Mashup by integrating individual Web Services which can satisfy end users' requirements. For this work, we propose a recursive algorithm. The implementation work is on Android 2.2 (froyo), API level 8 and above. It is supported on most of Android based mobile devices. Â© 2013 IEEE.",10.1109/ICCCNT.2013.6726550,REST;SOA;Service Composition;Service Mashups; Mashups;Agriculture;Service-oriented architecture;Simple object access protocol;Servers;Google; Android (operating system);mobile computing;service-oriented architecture;Web services; RESTful Web service integration;android platform;Internet;distributed environment;software components;service oriented architecture;SOA;simple object access protocol;SOAP;non uniform interface;hyperlink support;representational state transformation;REST;uniform resource identifier;URI;Hyperlinks;Android 2.2 froyo;Android based mobile devices,,1,1,,
,Multi-agent Based Semantic E-government Web Service Architecture Using Extended WSDL,M. A. Usman; M. Nadeem; M. Z. Ali Ansari; S. Raza,"The paramount of e-government is seamless integration of services across organizational boundaries. This requires interoperation of heterogeneous services for which Web services are being used currently. However there are several limitations of Web services. Due to the absence of some important characteristics Web services cannot overcome these limitations. Therefore to eliminate them the paper presents an architecture that augments Web services with multi-agent technology and uses OWLS (Web ontology language for services) for semantic description, thus paving the path for seamless integration of government services. The paper also discusses the implementation of the proposed architecture and a critical evaluation which resulted in the identification of reasons behind slow adoption of semantic Web services. In addition to this a solution is proposed that is believed to increase the adoption rate due to its simplicity. The solution recommends extending WSDL (Web service description language) to represent semantic information",10.1109/WI-IATW.2006.92,; Electronic government;Web services;Service oriented architecture;Semantic Web;OWL;Intelligent agent;Electronic mail;Paper technology;Simple object access protocol;Scalability; government data processing;Internet;multi-agent systems;specification languages; multi-agent system;semantic e-government Web service architecture;heterogeneous services;Web ontology language;semantic description;semantic information,,1,1,,
,Quo vadis interface definition languages? Towards a interface definition language for RESTful services,"Mangler, J and Schikuta, E and Witzany, C","Current web-service description languages like WSDL are very powerful and many topics, like how to describe the composition of web-services, have received much attention by the scientific community. With the rise of RESTful web-services, resources come to the focus of service developers, with the need to transfer many well understood problems to a new paradigm. RESTful services up to now are most commonly described in a natural language, and there is no good interface description language, as WSDL (2.0) is clumsy to use and WADL lacks features and widespread use. In this paper we want to analyze common interface description languages, their properties and shortcomings and we introduce RIDDL, a flexible and extensible service description language to cover description and composition. Â©2009 IEEE.",10.1109/SOCA.2009.5410459,; XML;Simple object access protocol;Natural languages;Representational state transfer;Computer science;Visualization;Skeleton;Automatic testing;Contracts;Service oriented architecture; Web services;XML; interface definition languages;RESTful Web services;natural language;WSDL;RIDDL;extensible service description language,,1,1,,
,OWL-S based autonomic services for grid computing,N. Jabisetti; Y. Lee,"Recent advances in the distributed computing infrastructure like Web, grid, and pervasive computing environment accompany demands for a more powerful and autonomous service framework. We believe it is feasible to achieve service discovery and matching in an automated manner and perform the service execution not in restricted environments. For the purpose, we developed an autonomous service framework, called ASF, which allows autonomous service to be published, discovered and executed in distributed environments based on the autonomous service specification, extension of the Web service ontology (OWL-S) to incorporate physical/logical resources and resource policy.",10.1109/ICWS.2005.89,; Grid computing;Web services;Distributed computing;Ontologies;Pervasive computing;Service oriented architecture;Computer architecture;Power engineering computing;Power engineering and energy;Cities and towns; Internet;grid computing;ubiquitous computing;formal specification;ontologies (artificial intelligence); OWL-S based autonomic service;grid computing;distributed computing;pervasive computing;autonomous service specification;Web service ontology;physical resource;logical resource;resource policy,,1,1,,
,A Preliminary Practice for BPEL Based Multimedia Conference Web Services Orchestration,C. Bo; G. Jie; C. Junliang; L. Xiangtao,"Inspired by the success of Web Service technologies for the development and deployment of IT services, the telecommunications R&amp;D community starts adapting and developing similar service delivery platforms, making use of existing basic services as building blocks to orchestrate new value-added complex services in a rapid and flexible way to catch the fast and dynamic changing market. In this paper, we have a preliminary practice for business process execution language based multimedia conference Web services orchestration, which can enable the top-down realization of service oriented architecture through coordination of multimedia conference communication Web services, and emphasis on the solution for the Parlay API specification based enhanced communication Web service accessibility, the BPEL based multimedia conference Web services process orchestration and the related key problems in multimedia conference scenarios. And finally, we also give conclusions and future research works.",10.1109/AICT.2008.81,BPEL;Telecom Web services;orchestration; Web services;IP networks;Research and development;Multimedia communication;Telecommunication services;Laboratories;Telecommunication switching;Business communication;Service oriented architecture;Communication industry; application program interfaces;business process re-engineering;multimedia communication;Web services; BPEL;Web services orchestration;business process execution language;service oriented architecture;multimedia conference communication;Parlay API specification,,1,1,,
,Tutorial 4: Web Services on Rails: Using Ruby and Rails for Web Services Development and Mashups,E. M. Maximilien; E. M. Maximilien,"One of the interesting aspects of the Web 2.0 'evolution' is the wide-availability of various Web applications as APIs or Web services. These APIs expose informational services on the Web and take many form of remote invocation of functions using standard Web protocols and XML for data representations, e.g., REST, SOAP/WSDL, XML-RPC, and other approaches. The services (or APIs) are also usually accompanied by user facing Web applications for human-consumption. Canonical examples are Google Maps, Yahoo! Flykr and del.icio.us, EVDB's Eventful's application and API, Amazon.com's S3, ECS, Alexa, and many others. The Ruby programming language and its Rails framework are ideal for programming Web applications and services in the Web 2.0. Ruby's modern and dynamic features make it an excellent language for rapid prototyping and integration of various Web services. Rails' superb support for rapid Web application development, database access, and AJAX, make it well suited for creating front-ends and back-ends to the next generation of Web applications and services. In this tutorial we will take a hands-on deep-dive into the Ruby and Rails platform and learn how they can be used to: (1) create Web applications backed by a relational database, (2) consume Web services, (3) create and deploy APIs or Web services, and (4) mashup of existing Web services and applications. No a priori knowledge of Ruby or Rails is required - although some programming in a modern OO language and Web application development are definite plus",10.1109/ICWS.2006.139,; ; application program interfaces;high level languages;Web services; Web services;Web protocols;XML;Ruby programming language;Rails framework;API,,1,1,1,1
,Access control management of the cloud service platform,K. Chung; C. Keum,"One of the design goals of the Cloud Service Platform was to help application developers to create their applications easier by providing reusable service components in the form of web services, such as, RESTful web services or web services based on SOAP. The Cloud Service Platform is designed to target to the communication and collaboration domain so that it provides service components having functionalities such as Email, short messaging, file cloud, third-party call, wiki, and etc. Therefore application developers can utilize these service functionalities by requesting the resources using HTTP methods outside the Cloud Service Platform (CSP). Therefore, the access to service components plugged into the CSP should be managed and the authorization process for the requesting applications is needed. We specify the relationship between applications and service components using service key, which is the unique identifier for an application and a service component. In addition, we define additional HTTP headers for authorization of the requesting application and utilize these headers for access control to service components. In this paper, we introduce the Cloud Service Platform and describe the mechanism of the access control management for service components on the Cloud Service Platform.",10.1109/ICTC.2014.6983231,Access Control;Service Component;Servlet Filter;Service Platform; Authorization;Servers;Service-oriented architecture;Semantics;Collaboration; authorisation;cloud computing;hypermedia;software reusability;Web services; access control management;cloud service platform;application developers;reusable service components;RESTful Web services;SOAP;email;short messaging;file cloud;third-party call;wiki;HTTP methods;CSP;authorization process;service key;HTTP headers,,1,1,,
,Towards Semantic Web Services: An empirical evaluation of service ontology generation tools,Sowmya Kamath S.; Ananthanarayana V.S.,"Web services are currently the most popular way of achieving service orientation for enterprise systems over the Web. Ontologies like OWL-S and WSMO have been defined as part of the semantic Web initiative to add semantics to service descriptions. The shift from mainly using the syntactic description of a web service, WSDL, to also providing a semantic description is fundamental to the effort of incorporating semantics in various service lifecycle tasks like service discovery, matchmaking and composition. With a few tools available for manual and semi-automated mapping of WSDL to OWL-S, choosing the best tool becomes a difficult choice to make. In this paper, a comprehensive comparative evaluation of some mapping tools currently available is presented and their performance is analyzed based on different parameters in order to assist service developers in choosing the right tool. The tools considered for the evaluation presented here are WSDL2OWL-S, Mindswap OWL-S API and OWL-S Editor.",10.1109/INDICON.2015.7443777,web services;ontology generation;ontological engineering;automated tools; Ontologies;Web services;OWL;Semantics;Grounding;Standards; knowledge representation languages;ontologies (artificial intelligence);semantic Web;Web services; semantic Web services;service ontology generation tools;WSDL2OWL-S;Mindswap OWL-S API;OWL-S Editor;Web Service Description Language;Web Ontology Language for Services,,1,1,,
,SAPS: Semantic AtomPub-Based Services,"Lanthaler, M and GÃ¼tl, C","The utopian promise of a uniform service landscape in the form of SOAP, WSDL, and UDDI made by service-oriented architectures (SOA) built on Web services has proven elusive. Instead more and more prominent Web service providers opted to expose their services based on the REST architectural style. Nevertheless there are still problems on formal describing, finding, and orchestrating Restful services. While there are already a number of different approaches, none so far has managed to break out of its academic confines. Thus, we propose a novel approach to build Semantic Restful Services based on proven technologies. The combination of those proven technologies leads to scalable and loosely coupled systems and has the additional advantage, that developers are already familiar with its functioning. Â© 2011 IEEE.",10.1109/SAINT.2011.73,Semantic Web;Web services;REST;Web 3.0;SAPS;Atom;OpenSearch;Internet;SOA; Semantics;XML;Web services;Protocols;Feeds;Ontologies;Contracts; service-oriented architecture;Web services; SAPS;semantic AtomPub-based service;uniform service landscape;SOAP;WSDL;UDDI;service oriented architecture;Web service;semantic RESTful service,,1,1,,
,SA-REST and (S)mashups : Adding Semantics to RESTful Services,"Lathem, J and Gomadam, K and Sheth, A P","The evolution of the Web 2.0 phenomenon has led to the increase d adoption of the RESTful services paradigm. RESTful services often take the form of RSS/Atom feeds and AJAX based light weight services. The XML based messaging paradigm of RESTful services has made it possible to compose various services together. Such compositions of RESTful services is widely referred to as Mashups. In this paper, we outline the limitations in current approaches to creating mashups. We address these limitations by proposing a framework called as SA-REST. SA-REST adds semantics to RESTful services. Our proposed framework builds upon the original ideas in WSDL-S, our W3C submission, which was subsequently adapted for Semantic Annotation of WSDL (SAWSDL), now a W3C proposed recommendation. We demonstrate use of microformats for semantic annotation of RESTful services and then the use of such semantically enabled services with better support for interoperability for creating dynamic mashups called SMashups. Â© 2007 IEEE.",10.1109/ICSC.2007.94,; Mashups;Computer science;Feeds;XML;Web services;Information filtering;Information filters;Standards development;Mediation;Scalability; Web services; SA-REST;Web 2.0;RESTful services paradigm;RSS/Atom feeds;AJAX based light weight services;XML based messaging paradigm;WSDL-S;WSDL semantic annotation,,1,1,,
,Improving dynamic Web service selection in WS-BPEL using SPARQL,N. Paiva Tizzo; J. Manuel AdÃ¡n Coello; E. Cardozo,"The dynamic selection of Web services must be able to adapt to a changing environment as services are permanently inserted, removed and modified. However, most composition languages do not support such dynamic selection, or support it in a restrict sense, as in WS-BPEL. In this work we employ available technologies, especially the WS-BPEL and SPARQL languages, in order to develop a model for the dynamic selection of Web services. In this model the user expresses the service requirements in the form of a query that will be resolved at runtime. This guarantees the adaption of the system - in a changing environment - without requiring to refactor the entire composition. The restrictions of such a system are listed. An implementation of the model and a case study are reported as well.",10.1109/ICSMC.2011.6083760,Dynamic Web service selection;Service composition;Semantic Web services;SPARQL;WS-BPEL; Resource description framework;Web services;Servers;XML;Protocols;Blogs; service-oriented architecture;specification languages;Web services; dynamic Web service selection;WS-BPEL;composition languages;SPARQL languages;service requirements,,1,1,,
,Using geodata and geoprocessing web services in embedded device,D. Zhang; B. Xie; H. Chen; Y. Lv; L. Yu,"Using XML web services in embedded system could be able to use the existing geodata and geoprocessing services through wired/wireless network. However, the processing and memory limitations of embedded devices exacerbate the problem in the area of complexity, constraints, and the verbosity of the protocols used in XML web services effect the usability of XML. This paper presents a GPS navigation system, which accesses OGC-compliant geodata and geoprocessing services using gSOAP toolkit. This system composes of hardware platform, embedded operation system and software system. Our experimental result shows gSOAP could provides transparent SOAP API allows embedded system using XML web services.",10.1109/ICETC.2010.5529252,XML web service;embedded device;gSOAP;OGC-compliant services; Web services;XML;Embedded system;Wireless networks;Access protocols;Usability;Global Positioning System;Navigation;Hardware;Software systems; embedded systems;geography;Global Positioning System;Web services;XML; geoprocessing Web services;embedded device;XML Web services;embedded system;geodata services;geoprocessing services;GPS navigation system;OGC-compliant geodata;gSOAP toolkit;SOAP API,,1,1,,
,Role-Centric RESTful Services Description and Composition for E-Business Applications,"Yu, H and Zhu, C and Cai, H and Xu, B","Currently there are increasing interests in using REST architecture style to implement business process. However, the importance of role is not emphasized. In fact role is critical to determine the RESTful services description and to control the services composition. This paper presents a role-centric RESTful services description and composition mechanism to implement business process. Firstly a resource meta-model is proposed, and then process and role are formally defined, RESTful services description is then generated based on role and BPEL is extended by introducing the concept of role to control the access to resources. A case study is also given to illustrate the approach and the desirable features of the approach are discussed. Â© 2009 IEEE.",10.1109/ICEBE.2009.23,RESTful Services;Role;Resource Meta-model;Business Process;BPEL; Service oriented architecture;Application software;Educational institutions;Computer architecture;Web services;Representational state transfer;Web sites;Automatic control; authorisation;business data processing;specification languages;Web services; role-centric RESTful service description;role-centric RESTful service composition;e-business application;resource meta-model;BPEL;access control,,1,1,,
,A RESTful approach: clean UPnP without SOAP,J. Newmarch,"UPnP is middleware designed for network ""plug and play"". It uses technologies developed specifically for UPnP but also borrows technologies such as SOAP from Web services for remote procedure calls. SOAP has been criticised as inappropriate for Web systems and this paper shows that these criticisms are equally applicable for UPnP. It shows how mechanisms built on REST principles can produce smaller, faster and simpler UPnP systems.",10.1109/CCNC.2005.1405157,; Simple object access protocol;Web services;Middleware;XML;Computer networks;Plugs;Home automation;Network servers;Java;World Wide Web; middleware;Internet;telecommunication services;protocols; RESTful approach;UPnP;SOAP;middleware;plug and play;Web service;network protocol,,1,1,,
,SA-REST: Semantically Interoperable and Easier-to-Use Services and Mashups,"Sheth, A P and Gomadam, K and Lathem, J","Services based on the representational state transfer (REST) paradigm, a lightweight implementation of a service-oriented architecture, have found even greater success than their heavyweight siblings, which are based on the Web Services Description Language (WSDL) and SOAP. By using XML-based messaging, RESTful services can bring together discrete data from different services to create meaningful data sets; mashups such as these are extremely popular today. Â© 2007 IEEE.",10.1109/MIC.2007.133,semantics and services;mashups;Web services; Mashups;Web services;Ontologies;Semantic Web;XML;Web pages;Service oriented architecture;Simple object access protocol;Information filtering;Information filters; message passing;open systems;Web services;XML; SA-REST;services based on representational state transfer;interoperability;easier- to-use services;mashups;service-oriented architecture;XML-based messaging,,1,1,,
,On the Performance of Web Services and Google Cloud Messaging,G. Albertengo; F. G. Debele; W. Hassan; D. Stramandino,"Smartphones and other connected devices rely on data services, such as web services (WS) and Google Cloud Messaging (GCM), to share the information they collect or use. Traditionally, these services were classified according to their efficiency or their delivery time, but, when dealing with battery operated devices, another important parameter is the power consumption. In this paper, we present the results from a test on GCM and two types of WS, namely SOAP-based and RESTful WS. In these tests, we experimentally collected time, efficiency, and power consumption figures for all services. The final outcome is that RESTful WS outperforms all other communication techniques in terms of one-way delay, round trip time, data consumption, packet overhead and battery duration.",10.1109/CIT.2017.66,web services;google cloud messaging;rest;soap; Simple object access protocol;Payloads;Conferences;Information technology;Delays; cloud computing;mobile computing;smart phones;Web services; power consumption figures;RESTful WS;data consumption;web services;connected devices;data services;Google Cloud Messaging;GCM;delivery time;battery operated devices;smartphones;SOAP-based WS,,1,1,,
,Service Security Revisited,P. L. Gorski; L. L. Iacono; H. V. Nguyen; D. B. Torkian,"Developing contemporary software architectures requires the consideration and adoption of the Service-oriented Architecture (SOA) principles. Distributed applications are a very common domain in which SOA guides design decisions in particular. For a long time, SOAP and its related stack of standards have been the only technological choice for implementing SOA-based systems. With the increased adoption of the REST concept, an alternative to SOAP is gaining traction. Security considerations have been part of the SOAP-based standardization work since the very beginning. As a result, a mature and comprehensive set of security-related standards is available for building SOAP-based service systems. REST-ful service systems, however, cannot take advantage of such a fully developed security framework yet. This paper therefore revisits the SOAP-based web services security stack in order to identify commonalities, differences and gaps in the security available for REST-ful services. From these findings a desired REST-ful web services security stack is proposed together with related research, development and standardization challenges.",10.1109/SCC.2014.68,SOA;Services;SOAP;REST;Security; XML;Standards;Simple object access protocol;Encryption; security of data;service-oriented architecture;Web services; SOA principles;service-oriented architecture;REST-ful Web services security stack;SOAP-based Web services security stack;service security,,1,1,,
,QoS-Driven Adaptation of BPEL Scenario Execution,K. Christos; C. Vassilakis; E. Rouvas; P. Georgiadis,"BPEL/WSBPEL is the predominant approach for combining individual Web services into integrated business processes, allowing for the specification of their sequence, control flow and data exchanges. BPEL however does not include mechanisms for considering the invoked servicespsila Quality of Service (QoS) parameters and thus BPEL scenarios can neither tailor their execution to the individual userpsilas needs or adapt to the highly dynamic environment of the WEB, where new services may be deployed, old ones withdrawn or existing ones changing their QoS parameters. Moreover, infrastructure failures in the distributed environment of the Web introduce an additional source of failures that must be considered in the context of QoS-aware service execution. In this work we propose a framework for addressing the issues identified above; the framework allows the users to specify the QoS parameters that they require and it undertakes the task of locating and invoking suitable services. Finally, the proposed framework intercepts and resolves faults occurring during service invocation, respecting the QoS restrictions specified by the consumer.",10.1109/ICWS.2009.80,Web services;BPEL;Adaptive execution;Performance Evaliation; Web services;Quality of service;Context-aware services;Informatics;Logic design;Runtime;Computer science;Telecommunication control;Communication industry;Communication standards; business data processing;electronic data interchange;quality of service;Web services; QoS-driven adaptation;quality-of-service;BPEL scenario execution;business process execution language;Web service;data exchange;distributed environment,,1,1,,
,An Ontology-Based Resource-Oriented Information Supported Framework towards RESTful Service Generation and Invocation,"Zhang, W and Jiang, L and Cai, H","Compare with SOAP-based service that based on interfaces access pattern, RESTful web service is HTTP-based and use resource as the operation object. On the purpose of supporting RESTful in the enterprise information application, a Resource-oriented Information Supported Framework is constructed based on ontology construction and evolution. First, the initial ontology with relational pattern is extracted from the enterprise legacy databases. Users can generate the domain ontology through the evolution of initial ontology led by enterprise elements. And then evolve domain ontology to resource model according to the virtual resource in enterprise. Finally user can describe the resources based on resource model to meet the REST Web Service. In order to support the dynamic, flexible, and scalable enterprise application, the framework also provides a semantic reference for RESTful service invocation. The prototype system has been developed now in order to implement the application, which includes a semantic uniform view in complex data environments of enterprise so as to build an information environment for RESTful services execution. Considering there are an increasing research and application tendency in the field of resource-oriented approach, the Ontology-based Resource-oriented Information Supported Framework provides a semantic-level enterprise information base not only for heterogeneous data integration but also for RESTful services application. Â© 2010 IEEE.",10.1109/SOSE.2010.59,RESTful Service;ontology evolution;Heterogeneous Data Integration;Architecture; Ontologies;Web services;Databases;Data mining;Engines;Semantics;Business; business communication;data integrity;distributed databases;feature extraction;ontologies (artificial intelligence);Web services; ontology based resource oriented information supported framework;SOAP based service;interfaces access pattern;RESTful Web service;enterprise information application;enterprise legacy database;RESTful service execution;heterogeneous data integration,,1,1,,
,Designing a restful question bank service in cloud,S. Hu; I. Chen; Yaw-Ling Lin,"Online question bank systems play a critical role in evaluating learners' achievement. For easy sharing and reusing, there is a standard for encoding question banks' pedagogical contents and presentational format. However, access interfaces to most online question banks are proprietary, such that the offered contents are available to limited users only and difficult to utilize and circulate. SOAP-based Web service to some extent solves the openness issue by conforming to existing standards. To enrich contents of question banks and facilitate sharing them among educators, it is of great importance to build easy-accessible as well as open question banks. This article proposes a method for designing a question bank in cloud according to the representational state transfer architectural style. Accordingly, the question bank can allows instructors and students using various devices to access online assessment resources under various learning circumstances.",10.1109/ICMT.2011.6001944,e-learning;online question bank;cloud computing;SaaS;Restful Web services; Simple object access protocol;Cloud computing;Java;Computer architecture;Software;XML; access protocols;cloud computing;computer aided instruction;design engineering;Web services; restful question bank service design;cloud computing;online question bank systems;learner achievement evaluation;question bank pedagogical contents;question bank presentational format;access interfaces;SOAP-based Web service;representational state transfer architectural style;online assessment resources;simple object access protocol,,1,1,,
,An Approach of Service Discovery Based on Service Goal Clustering,N. Zhang; J. Wang; K. He; Z. Li,"The increasing amount of services published on the Web makes it difficult to discover relevant services for users. Unlike the SOAP-based services that are described by structural WSDL documents, RESTful services, the most popular type of services, are mainly described using short texts. The keyword-based discovery technology for RESTful services adopted by existing service registries is insufficient to obtain accurate services according to user requirements. Moreover, it remains a difficult task for users to specify queries that perfectly reflect their requirements due to the lack of knowledge of their expected service functionalities. In this paper, we propose a goal-oriented service discovery approach, which aims to obtain accurate RESTful services for user functional goals. The approach first groups existing services into clusters using topic models. It then clusters the service goals extracted from the textual descriptions of services by leveraging the topic model trained for services. Based on the service goal clusters, our approach can help users refine their initial queries by recommending similar service goals. Finally, relevant services are obtained by matching the service goals selected by users with those of existing services. Experiments conducted on a real-world service dataset crawled from ProgrammableWeb show the effectiveness of the proposed approach.",10.1109/SCC.2016.22,Service discovery;RESTful services;service goal;topic model;clustering; Semantics;Data models;Skeleton;Computational modeling;Algorithm design and analysis;Computers;Web services; document handling;Internet;service-oriented architecture; service goal clustering;Web;structural WSDL documents;service functionalities;goal oriented service discovery approach;textual descriptions;ProgrammableWeb,,1,1,,
,HyperMash: A Heterogeneous Service Composition Approach for Better Support of the End Users,"Hang, F and Zhao, L","The emergence of Web 2.0 and its related technologies such as HTML5 has empowered the end users and made it possible for them to compose their own Web applications. Yet, most of the current development has mainly concentrated on the support of the composition of enterprise-oriented services and scientific workflows, with not enough effort made to support the composition of end user-oriented services. This paper presents HyperMash, a service composition approach for the end users. The salient feature of this approach is its support of on demand heterogeneous service composition, which allows the end users to create their own composite services by combining RESTful services with SOAP-based services at runtime. In addition, to make it easier for the end users to compose RESTful services, HyperMash provides a full set of RESTful interface features. The paper describes the conceptual framework and working principles of HyperMash and illustrates the HyperMash approach through two examples. Â© 2013 IEEE.",10.1109/ICWS.2013.65,End User Oriented Service Composition;Heterogeneous Service Composition;RESTful Web Services;SOAP-Based Web Services;Mashups;HyperMash;Service Composition Ontology; Web services;Runtime;Availability;Monitoring;Visualization;Connectors; hypermedia markup languages;Internet; heterogeneous service composition approach;HyperMash;end user support;Web 2.0;HTML5;Web applications;enterprise oriented services;scientific workflows;SOAP-based services;RESTful interface features,,1,1,,
,Service graph base: A unified graph-based platform for representing and manipulating service artifacts,Xi Chen; A. L. Lemos; M. C. Barukh; B. Benatallah,"The number of Web-Services publicly accessible through APIs have rapidly grown in recent years. Although, while these services are key in providing access to data as well as a variety of functionality, often their full potential remains yet to be fully exploited. Due to the different standards used to implement and expose Web services, it is usually cumbersome for developers to reuse them within third-party applications. In this paper, we present Service Graph Base, a unified graph-based platform for representing and manipulating service artifacts. It allows professional developers to add service knowledge to a graph base, which can be done either automatically or manually. By adopting the language-neutral RDF-based Graph Model and developing a uniformly-interfaced service editor for service native artifacts extraction, services are represented as RDF graphs in Service Graph Base. Once they are in the graph base, common SPARQL queries can be used to provide intelligent exploration over the base, thereby providing a unified approach regardless of the actual service type. In our work, we have harvested 4,925 Yahoo! pipes and 300 WSDLs for service artifacts extraction and service query. Experiments showed that 99.35% Yahoo! pipes and 100% WSDLs were successfully represented as RDF graphs.",10.1109/SOCA.2012.6449468,Web Services;Service Artifacts;Graph Model;RDF;SPARQL; Communities;Resource description framework;Knowledge based systems;Web services;Educational institutions;Algorithm design and analysis;Standards; application program interfaces;graph theory;query processing;SQL;Web services; service graph base;unified graph-based platform;API;Web services;third-party applications;language-neutral RDF-based graph model;uniformly-interfaced service editor;service native artifacts extraction;SPARQL queries;WSDL;service query;Yahoo! pipes,,1,1,,
,Applying Agent Composition for Development of Service-Oriented Program Language,"Kuo, J -Y and Hsieh, F and Lin, H C","This paper proposed three basic components of service-oriented programming to facilitate the development of workflow application. Those APIs of web service include Mailbox, Event Channel and Semaphore. Web service developer and BPEL designer can apply those APIs to improve their developing productivity of service-oriented system. Those APIs can supply synchronize, asynchronize and resource exclusive mechanisms. This paper introduces the design and implementation of those API. We use an example to explain how service-oriented developer to synthesize these APIs for work flow application. Â© 2008 IEEE.",10.1109/ISDA.2008.245,Agent Composition;Service-oriented Program Language; Web services;Service oriented architecture;Web and internet services;Protocols;Automata;Switches;Intelligent systems;Intelligent agent;Productivity;Distributed processing; application program interfaces;business data processing;programming;programming languages;Web services; agent composition;service-oriented program language;service-oriented programming system;workflow application;API;Web service,,1,1,1,1
,WEB services,N. Ari; M. M. Boukar,"WEB Services convert the applications into a WEB application, which can publish its function or message to the rest of world. The basic WEB Services platform is XML + HTTP The types of WEB Services have been explained. WEB Services platform elements are illustrated. The ScalabelVector Graphics (SVG) is explained in detail. The advantages of SVG are illustrated using practical examples, such as SVG-Ellipse, SVG-Line, SVG-Rect, ..",10.1109/ICECCO.2014.6997581,WEB Services;SOAP;WSDL;UDDI;XML;HTML; XML;Simple object access protocol;Protocols;Vectors;Shape; computer graphics;hypermedia;transport protocols;Web services;XML; SVG-rect;SVG-line;SVG-ellipse;scalabel vector graphics;HTTP;XML;Web application;Web services,,1,1,,
,Research of livestock farming IoT system based on RESTful web services,"Pan, L and Xu, M and Xi, L and Hao, Y","The Internet of Things (IoT) technology, based on the wireless sensor network, is developing rapidly and permeating into agriculture including livestock farming. Our research focuses on the problem that current industrial IoT system for livestock farming is tightly coupled, hard to expand, and with poor network performance. In this paper we proposed an integrated framework of smart livestock farming IoT system by means of RESTful (REST: Representational State Transfer) web services. The global research-and-developing situation of smart livestock farming IoT system is given at first. Then SOAP-based WS-â and REST, two common Web services technology, are compared and their suitable application scenarios are also described. Finally, a prototype system of smart livestock farming IoT system based Restful Web Services is introduced about environment monitoring and control of henhouse. The experimental result of the prototype system shows that applying Restful Web Technology could improve the efficiency of application development and provides a feasible system development model for smart livestock farming IoT system. Â© 2016 IEEE.",10.1109/ICCSNT.2016.8070130,Smart Livestock Farming;Internet of Things (IoT);Web Service;Representational State Transfer (REST);Simple Object Access Protocol (SOAP);System integration; Agriculture;Web services;Servers;Protocols;Sensors;Hardware;Production; agriculture;Internet of Things;Web services; wireless sensor network;representational state transfer;SOAP-based WS-*;henhouse control;environment monitoring;Internet of Things;agriculture;RESTful web services;Restful Web Services;prototype system;smart livestock farming IoT system,,1,1,,
,Geospatial information services on the basis of agent and OWL-S,Jing Dongsheng; Bi Siwen; Wu Fei,"After Web service is applied for the Internet, the Web not only becomes the plat of transferring data, but information communication tools. Geospatial information services will provide the data and function services to handle with basic geo-tasks, user and software agent should be discover, invoke, compose and monitor geospatial resources offering particular services and having particular properties. So the Web Ontology Language for Services (OWL-S) is imported to express the process ontology and process control ontology. In virtue of the Web services semantic markup, we can develop the agents to support the automatic reasoning and fulfil the composition of Web services and inter-operation. In this paper, the OWL-S services model and the upper ontology are analyzed. On the basic of standards of W3C and Open Geospatial Consortium (OGC), the author presents the framework of the geospatial semantic services that contains the semantic markup for Web services, user's restrictions, Web agent process and so on. At last, the geospatial semantic search service is discussed in detail.",10.1109/IGARSS.2005.1525252,; Web services;Ontologies;Grounding;Bismuth;Laboratories;Remote sensing;Content addressable storage;Web and internet services;Software agents;Monitoring; geographic information systems;geophysical techniques;Internet;software agents;ontologies (artificial intelligence);open systems; geospatial information service;OWL-S;Internet;information communication;user agent;software agent;geospatial resources;Web Ontology Language for Services;process control ontology;Web service composition;Web service interoperation;Open Geospatial Consortium;geospatial semantic services;Web agent,,1,1,,
,Measuring Credit of Web Service,B. Xu; J. Ge; T. Chung,"Service selection has been a critical concern for constructing a distributed service-based system. So far, research efforts on service selection are mainly based on the criteria of functionality and QoS (Quality of Service). However, the credit of Web service represents the reputation and importance of a Web service, which also provides a key criterion for selecting service. Then the challenge is how to measure the credit of Web service. In this paper, we propose a method for measuring the credit of service through service network. First, we propose a model for constructing exact service network, which is effectively applied to different type of services like WSDL and Web API. Next, an approach is proposed to depict the credit of service from three aspects: popularity, influence and authority. We use about 15000 services from Seekda and ProgrammableWeb in the experiments, the results show that our approach can rank the credit of service effectively, and play a positive role in measuring the credit of a service.",10.1109/ICWS.2014.67,credit of service;service network;service selection; Silicon;Mashups;Tin;Quality of service;Ecosystems;Microcomputers; application program interfaces;Web services; service selection;distributed service-based system construction;Web service reputation;Web service importance;Web service credit measurement;service network;WSDL;Web API;popularity factor;influence factor;authority factor;Seekda;ProgrammableWeb,,1,1,,
,Efficient Web Services Message Exchange by SOAP Bundling Framework,T. Takase; K. Tajima,"Web services use an interoperable and loosely coupled data exchange architecture. Web services processing can cause significant runtime overhead, especially when the number of fine-grained transactions becomes large. Although some best-practice guidelines recommend coarse-grained messages to improve the performance of web services, coarse-grained services may interfere with the componentization of the services. Service granularity should be designed for reusability and modularity. In this paper, we propose a SOAP message bundling framework. This framework enables bundling multiple messages into one message. With this framework, application developers do not have to consider the service granularity. Instead, the framework bundles some fine-grained messages into a single coarse-grained message. To support this framework, we provide for service providers (1) a WSDL conversion tool and (2) a skeleton wrapper generator. These tools let service providers receive bundled messages without modifying existing service implementations. We also provide (3) a stub wrapper generator that allows service requesters to use bundled services easily. The existing message exchanges are not influenced by this framework. We evaluated the performance gain in experiments using the Google SOAP API. The results showed that our approach improves the performance of web services.",10.1109/EDOC.2007.38,; Web services;Simple object access protocol;Encoding;Distributed computing;Service oriented architecture;Guidelines;Informatics;Laboratories;Runtime;Skeleton; access protocols;message passing;open systems;software architecture;software reusability;specification languages;Web services; Web service;message exchange;SOAP bundling framework;interoperability;loosely coupled data exchange architecture;WSDL conversion tool;skeleton wrapper generator;stub wrapper generator;Google;API;software reusability,,1,1,,
,Web services for designing small-scale Web applications,K. Dezhgosha; S. Angara,"It is a well-known fact that since the emergence of Internet, Web and e-commerce applications have become increasingly popular. With the growing demand of Web-based applications, a number of issues have also increased proportionately regarding scalability, interoperability and application integration. ""Web services"", which is a new XML based framework introduced by W3C (World Wide Web consortium) has addressed several of these issues. Web services defines a standard for achieving smooth communication among discrete application systems by using a framework based on the exchange of messages and documents in XML over standard Internet protocols. Because Web services comprises of other additional components (SOAP, WSDL and UDDI) apart from XML, it is widely used in large-scale enterprise applications and often its potential is overlooked in small business applications. Nevertheless, Web services when employed in small-scale applications not only renders interoperability but also improves scalability to a great extent. For example, a simple interface of XML and SOAP that uses a minimal number of APIs in a Web application could become a powerful feature to connect the application to other subsystems, saving on development cost, effort and time, compared to using complex middleware technologies such as CORBA or DCOM. Implementations using middleware technologies mostly require the use of request brokers, whereas in Web services, the usage of service brokers is optional thereby eliminating the necessity to bind any remote interfaces. In addition, Web services implementations are not vendor specific, hence there is no occurrence of vendor-imposed restrictions, whereas distributed system middleware technologies are vendor specific many a time. The only issue involved is which programming software to use for implementation and whether it would provide the maximum number of APIs to enable future upgrades. Also when there is bulk of data to be transmitted back and forth within the application, it is relatively easy and efficient to do so by using XML compared to using numerous request parameters or session attributes. Web services can also be applied in combination with other object oriented frameworks such as MVC (model view controller), to bring out effective results in application performance",10.1109/EIT.2005.1627034,Web Services;Java;SOAP;MVC (Model View Controller); Web services;XML;Middleware;Scalability;Communication standards;Simple object access protocol;Web sites;Web and internet services;Large-scale systems;Rendering (computer graphics); electronic commerce;Internet;middleware;XML; Web services;small-scale Web application;e-commerce application;XML;World Wide Web consortium;Internet;small business application;middleware technology;object oriented;Java;SOAP;model view controller,,1,1,,
,A Management Framework for WS-BPEL,T. v. Lessen; F. Leymann; R. Mietzner; J. Nitzsche; D. Schleicher,"WS-BPEL is the standard to define executable business processes in a Web service world. Numerous commercial and open source BPEL engines exist on the market today that allow the execution of process models defined in BPEL. However, these execution engines only provide access to process model and process instance data in terms of proprietary APIs. In this paper we present an approach that models BPEL process models and process instances as resources and thus provides a uniform access scheme for process model and process instance data. This is crucial because access to process model and process instance data is needed in different scenarios that are of key relevance in enterprises today. These scenarios include compliance checking, repair of faulted business processes as well as real-time monitoring of business processes. The lack of a uniform access scheme to process model and process instance data hampers the exchangeability of BPEL engines and therefore results in a potential vendor lock-in.",10.1109/ECOWS.2008.25,BPEL;Management;Web Services;Resources; Engines;Web services;Business;Monitoring;Resource management;Information retrieval;Conference management;Service oriented architecture;Banking;Humans; business data processing;Web services; management framework;WS-BPEL;Web service;business process real-time monitoring;BPEL engines exchangeability,,1,1,,
,Using WADL Specifications to Develop and Maintain REST Client Applications,"Fokaefs, M and Stroulia, E","Service orientation is one of the most popular paradigms for developing modular distributed software systems. In spite of the substantial research effort dedicated to the development of methods and tools to support SOAP-based service-oriented application development, in practice, Restful services have surpassed SOAP-based services in popularity and adoption, primarily due to the simplicity of their invocation. However, poor adoption of REST specification standards and lack of systematic development tools have given rise to many, more or less compliant, variants of the Restful style constraints, which undermine the evolvability and interoperability of these systems. In this paper, we describe a tool that supports the systematization of Restful application development, through the use of semi-automatically constructed WADL interface specifications, without compromising the ease of the overall practice. We illustrate the use and advantages of our tool on real-world REST APIs. Additionally, we comment on how REST APIs are documented, especially in comparison to the auto-generated WADLs. Â© 2015 IEEE.",10.1109/ICWS.2015.21,; Generators;Uniform resource locators;Documentation;Google;Software;XML;Blogs; application program interfaces;formal specification;Internet;service-oriented architecture;software maintenance;specification languages; REST client application maintenance;modular distributed software system development;SOAP-based service-oriented application development;RESTful service;invocation;REST specification standard;system evolvability;system interoperability;RESTful application development;WADL interface specification;REST API;autogenerated WADL,,1,1,,
,Situation-driven processes for Semantic Web Services,S. Dietze; A. Gugliotta; J. Domingue,"Process models to support user objectives are used across several domains, such as eLearning or Business Process Management. Usually, specific metadata schemas, such as the XML bindings of the Business Process Modelling Notation (BPMN) or IMS Learning Design (IMS LD), are used to enable interoperability. Since Web services which are used throughout a process at runtime, are allocated statically within the process model at design-time, their dynamic adaptability to distinct situations is highly restricted. Whereas the aforementioned process models define a process from a user perspective, Semantic Web Services (SWS) technologies, such as WSMO or OWL-S, define processes from a system perspective by enabling the semantic description of services and data to support their automatic discovery and invocation to achieve specific user tasks at runtime. However, until now, a common link is missing to bridge between a processpsila user perspective and its system perspective. In this paper we propose a metamodel for Situation-Driven Processes (SDP) which enables the description of a process in terms of specific process situations which each is linked to a specific user Goal (user perspective) as well as a set of Brokered Goals (system perspective). Since Brokered Goals are gradually derived from SWS Goals, a process is accomplished dynamically at runtime in terms of SWS Goal achievements. As a result, following an approach of situation-driven process generation at runtime, we support the dynamic composition of a process appropriate for a given situation and its automatic transformation into distinct process metadata standards.",10.1109/ICSSSM.2008.4598524,Semantic Web Services;WSMO;IRS-III;Process Management; Web services;Semantic web;Runtime;Ontologies;Standards;Business;Electronic learning; meta data;ontologies (artificial intelligence);open systems;semantic Web;Web services;XML; situation-driven processes;semantic Web services;eLearning;business process management;metadata schemas;XML bindings;business process modelling notation;IMS learning design;interoperability;WSMO;OWL-S;brokered goals;automatic transformation,,1,1,,
,Building a User Friendly Service Dashboard: Automatic and Non-intrusive Chaining between Widgets,"Laga, N and Bertin, E and Crespi, N","End-users self service and end-users as co-developers are two main characteristics of web 2.0 paradigm. They will harness the great potential of the Internet of services. However, today's service exposure tools and service composition tools are too complex to be used by ordinary end-users. They are based on technologies such as REST, WSDL, and SOAP which are hardly understandable by the end-user. In this paper, we propose a widget based service exposure and service creation tool. Our framework creates links between loaded widgets automatically; additional functionalities are thus added automatically to existing widgets as long as the end-user loads other widgets to his personal environment; in the same way as he launches an application on his Windows environment. This mechanism is definitely more intuitive than SOA technologies as it is based on the user interface. Â© 2009 IEEE.",10.1109/SERVICES-I.2009.62,Web 2.0;widgets;service composition;service dashboard; Telecommunications;Service oriented architecture;User interfaces;Web and internet services;Simple object access protocol;Application software;Software reusability;Research and development;Software packages;Packaging; human computer interaction;software architecture;user interfaces;Web services; user friendly service dashboard;widget-based service;end-user self service;Web 2.0;Internet-of-service;Windows environment;SOA technology;user interface,,1,1,,
,Enabling Message Security for RESTful Services,G. Serme; A. S. de Oliveira; J. Massiera; Y. Roudier,"The security and dependability of cloud applications require strong confidence in the communication protocol used to access web resources. The mainstream service providers nowadays are shifting to REST-based services in the detriment of SOAP-based ones. REST proposes a lightweight approach to consume resources with no specific encapsulation, thus lacking of meta-data descriptions for security requirements. Currently, the security of RESTful services relies on ad-hoc security mechanisms (whose implementation is error-prone) or on the transport layer security (offering poor flexibility). We introduce the REST security protocol to provide secure service communication, together with its performance analysis when compared to equivalent WS-Security configuration.",10.1109/ICWS.2012.94,REST;Performance;Message Security;Protocol; Protocols;Encryption;Servers;Payloads;Standards; cloud computing;cryptographic protocols;Java;service-oriented architecture;transport protocols;Web services; communication protocol;Web resources;mainstream service providers;RESTful services;SOAP-based services;REST security protocol;secure service communication;performance analysis;message security;cloud application,,1,1,,
,A parameterized RBAC access control model for WS-BPEL orchestrated composite web services,N. Nassr; E. Steegmans,"In complex environments multiple web services are needed to interoperate together. Web Services Business Process Execution Language (WS-BPEL) has become the de facto standard for orchestrating composite web services. Unfortunately, WS-BPEL bypasses some business mandatory security requirements such as authentication and authorization. However, there have been some initiatives to address the authorization-bypass security vulnerability in WS-BPEL through integration with access control models such as RBAC. However, the RBAC models used lack expressiveness in role definitions and in roles to permissions mappings. More so, the architectures proposed use sequential authorization that is inefficient for long running business processes. In this paper, we extend the parameterized RBAC model and integrate it with WS-BPEL. The new extended parameterized RBAC model for WS-BPEL provides restriction of access up to the level of the variables of the business process. We also provide a new algorithm for authorization enforcement that addresses limitations of exiting WS-BPEL authorization architectures.",,Parameterized RBAC;composite web services;WS-BPEL;access control;web services security; Web services;Authorization;Process control;Organizations; authorisation;business data processing;specification languages;Web services; parameterized RBAC access control model;role-based access control;WS-BPEL orchestrated composite Web service;Web services business processing execution language;business mandatory security requirement;authentication requirement;authorization requirement;authorization-bypass security vulnerability;sequential authorization;business process,,1,1,,
,Research on SOA-Based Integrated Strategy to Enable the Smart Grid,C. Liu; T. Reynolds; H. Bao,"This paper proposes the use of service-oriented architecture and Web service technology, to address the current energy control problem. We propose a extended hierarchical model to organize the integrated smart grid system connected over the IP cloud, so that coordination and cooperation of all information systems are achieved autonomously and provides consumers with a carbon network management platform for real-time control. Detailed analyses and explanation of each layer of the architecture is presented and a related technology is introduced such as UDDI, SOAP, RDF. This study was designed to solve the energy restructuring, energy supply and consumption regulation, and the effective use of existing resources to strengthen the power infrastructure system agility and interactivity.",10.1109/CyberC.2010.98,service-oriented architecture;web service;smart grid;energy restructuring;IP cloud;RDF; Service oriented architecture;Smart grids;Computer architecture;IP networks;Real time systems;Business; energy consumption;power engineering computing;smart power grids;software architecture;Web services; SOA-based integrated strategy;service-oriented architecture;Web service technology;current energy control problem;integrated smart grid system;IP cloud;information systems;carbon network management platform;UDDI;SOAP;energy restructuring;energy supply;consumption regulation;power infrastructure system agility,,1,1,,
,A Multi-Agent-Based Service-Oriented Architecture for Inter-Enterprise Cooperation System,X. Liu,"Inter-enterprise cooperation system software manages full business processes and allows access to both own and partners' system. Many organizations have discovered that attempting to force collaboration by synthesizing information systems into an inter-enterprise cooperation environment fails. The study of the existing approaches shows that no single solution fulfills all requirements identified for the inter-enterprise cooperation system. One of the basic obstacles is the lack of comprehensive models and tools for inter-enterprise cooperation system as a basis for contracting and standardization. This paper proposes a multi-agent-based service-oriented architecture (SOA) for inter-enterprise cooperation system. In this paper, establishes the basis for transforming the inter-enterprise cooperation business models into multi-agent-based SOA components, utilizes existing web services standards UDDI Specifications and design UDDI Service Agent tool for an extension to UDDI Data Structure and UDDI XML API to be able to associate automatically both prescriptive and descriptive metadata with service entries. Finally, we outline the implementation of a prototype.",10.1109/ICDT.2007.4,SOA Multi-agent Web services UDDI Inter-enterprise Cooperation System; Service oriented architecture;Web services;Supply chains;Software systems;Virtual enterprises;Computer architecture;Object oriented modeling;XML;Application software;Quality of service; business data processing;business forms;data structures;multi-agent systems;organisational aspects;software architecture;Web services; multiagent;service-oriented architecture;interenterprise cooperation system;force collaboration;Web services;UDDI Specifications;Service Agent tool;Data Structure;XML API,,1,1,,
,Building a modular service oriented workflow engine,G. StÃ¼rmer; J. Mangler; E. Schikuta,"Current workflow engines, often based on WS-BPEL, are monolithic programs to orchestrate a business process or take part in choreography between partners. They cover aspects like the execution of the workflow description derived from the business process, the communication with external services, and the handling of errors. Both, the communication with services as well as basic error handling are covered by static and internal APIs [S. Modafferi, E. Mussi, and B. Pernici (2006)], and thus provide only simple strictly internal means of interaction with running workflows. Introducing new repair algorithms or self-healing behavior require detailed monitoring and modification of all aspects of a workflow execution thus requiring a modularization of the workflow engine itself. In this paper we will present a modular and service oriented workflow engine. Modularity and service-orientedness are realized by integrating a workflow execution engine with means of logging, repair and possibility to invoke external services through simple Web-based APIs.",10.1109/SOCA.2009.5410270,; Search engines;Runtime;Service oriented architecture;Web services;Computer science;Business communication;Monitoring;IP networks;Web and internet services;Yarn; application program interfaces;business data processing;error handling;software architecture;workflow management software; modular service oriented workflow engine;WS- BPEL;business process;monolithic programs;choreography;error handling;Web-based APIs;workflow execution;workflow description language,,1,1,,
,Validation of a CoAP to IEC 61850 Mapping and Benchmarking vs HTTP-REST and WS-SOAP,M. Iglesias-Urkia; D. C. Mansilla; S. Mayer; A. Urbieta,"With the advent of Smart Grid systems, the digitalization of electrical grid infrastructures aims to improve energy saving and efficiency. The International Electrotechnical Commission (IEC) is one of the organizations that create and manage norms and standards in areas related to electricity and electronics, such as IEC 61850. In recent years, the research community have proposed mappings of different communication protocols to IEC 61850. However, most of the proposals focused on heavyweight interaction paradigms and protocols such as Common Object Request Broker Architecture (CORBA), Data Distribution Service (DDS), HTTP-REST or Web Services. With the proliferation of the Internet of Things (IoT), new lightweight protocols are appearing opening new perspectives to the standard. Hence, this paper firstly presents a validation of a mapping of the IEC 61850 standard to the Constrained Application Protocol (CoAP) and then compares its performance implementing the IEC's mapping against HTTP-REST and Web Services/SOAP. For comparison purposes, the communication latency, the number of total bytes sent, and the size of the overhead are presented for each of the three approaches. To conclude, future perspectives on the suitability of lightweight protocols to the IEC 61850 are provided.",10.1109/ETFA.2018.8502624,Benchmarking;CoAP;HTTP-REST;IEC 61850;Internet of Things;IoT;Smart Grids;SOAP;Web Services; IEC Standards;Protocols;Proposals;Simple object access protocol;XML;Monitoring; distributed object management;IEC standards;Internet of Things;power engineering computing;smart power grids;transport protocols;Web services; HTTP-REST;lightweight protocols;IEC 61850 standard;Constrained Application Protocol;CoAP;Web Services/SOAP;IEC 61850 Mapping;Smart Grid systems;electrical grid infrastructures;International Electrotechnical Commission;electricity;electronics;Internet of Things;data distribution service;communication protocols;Common Object Request Broker Architecture,,1,1,,
,A Framework for Semantic Web Service Discovery and Planning,S. Chaiyakul; K. Limapichat; A. Dixit; E. Nantajeewarawat,"With the expanse of Internet, Web programmers have wide choice of Web services available to them. A need arises for automatic discovery of required Web services and construction of an appropriate sequence of invocation thereof. In this paper, we present a framework for automation of this task based on currently emerging technologies such as ontological knowledge bases, OWL, OWL-S, WSDL, description logic (DL), etc. Background knowledge ontologies are created based on which semantic meanings of Web services can be given through OWL-S. An agent employs OWL-S API to extract Web service metadata, and applies a DL inference engine, called Racer, for reasoning with the metadata with respect to given background knowledge. Reasoning tasks performed by Racer include profile matchmaking, input/output subsumption testing, and preconditions/effects analysis, which are basic mechanisms for Web services discovery and invocation planning. A prototype system has been implemented",10.1109/ICCIS.2006.252304,OWL;OWL-S;Semantic Web Service; Semantic Web;Web services;Ontologies;Web and internet services;Programming profession;Automation;OWL;Logic;Search engines;Performance evaluation; data mining;inference mechanisms;knowledge based systems;knowledge representation languages;ontologies (artificial intelligence);semantic Web;Web services; semantic Web service discovery;semantic Web service planning;Internet;knowledge ontology;OWL-S API;Web service metadata;OWL-DL inference engine;Racer;profile matchmaking;input-output subsumption testing;Web invocation planning;precondition-effect analysis,,1,1,,
,Proposal of a REST-Based Architecture Server to Control a Robot,R. Esteller-Curto; E. Cervera; A. P. del Pobil; R. Marin,"Middle wares such as Player and ROS are commonly used in network robotics applications in order to provide networking capabilities and other functionalities such as remote control, vision, and others. On the other hand, they introduce more complexity to the system and decrease the system performance. For that reason, the use of web services, remote procedure calls, or messaging can be considered as an alternative to minimize the system complexity and design a more specific architecture that works at a certain performance. In fact, using simple HTTP connections to a robot can be very adequate in education and training or benchmarking applications where the students and researchers must concentrate on the design of the system and have an easy way to interact with the robot. This article proposes a REST architecture used over a HTTP connection to control a robot and exchanging information using xml. That provide great advantages, using standard HTTP calls enhances the availability of the system, and increases the debug facilities. The REST architecture has some characteristics that sometimes can be seen as an advantage and other times as an inconvenient, it is very simple and stateless. As opposite to SOAP and other RPC servers, REST is based on resources, not on operations. The REST philosophy aims to access URIs through HTTP protocol using CRUD operations. On the other hand, there are functionalities not supported as the need of callbacks which can be solved with different approaches (polling or non-REST callbacks). The research is based on the experience of constructing a server to control a 6-degree of freedom FANUC robot, letting the robot be accessed by simple HTTP connections using a REST-based architecture.",10.1109/IMIS.2012.130,Internet;robotics;REST;architecture; Robots;Servers;XML;Computer architecture;Libraries;Complexity theory;Sockets; computational complexity;control engineering computing;middleware;robots;transport protocols;Web services; REST-based architecture server;robot control;middlewares;Player;ROS;network robotics applications;remote control;system complexity;Web services;remote procedure calls;HTTP connection;standard HTTP calls;FANUC robot;URI;CRUD operations;HTTP protocol;RPC servers;SOAP;debug facilities,,1,1,,
,A Lightweight Inter-node Operation for UDDI Cloud,R. Podesta,"Coordinated UDDI public registries disappeared almost two years ago. In 2006 the UDDI cloud, a registries federation managed by IBM, HP, Microsoft and SAP, was shut down with the end of the UDDI business registry (UBR) project. UDDI is still widely adopted for private registries. Isolated public registries are quite rare and an UDDI coordination mechanism is still missing. In URB a pure entries replication mechanism was allowing access to all the entries published on each server. However, such pure replication does not scale and prevents the creation of dynamic federation of UDDI registries. This paper describes a work-in-progress solution based on a inter-node operation enabling the replication APIs to distribute the entries across a distributed hash table (DHT). Thus, it reduces the number of replicated entries to a sub-set of nodes participating in the UDDI cloud and opens a new possible scenario for the adoption of the UDDI standard.",10.1109/EDOCW.2008.7,; Clouds;Network servers;Peer to peer computing;Project management;Usability;Resource management;Costs;Investments;Convergence; application program interfaces;file organisation;Web services; lightweight inter-node operation;UDDI cloud;private registries;API;distributed hash table,,1,1,,
,Correct-by-Construction Web Service Architecture,"Stachtiari, E and Vesyropoulos, N and Kourouleas, G and Georgiadis, C K and Katsaros, P","Service-Oriented Computing aims to facilitate development of large-scale applications out of loosely coupled services. The service architecture sets the framework for achieving coherence and interoperability despite service autonomy and the heterogeneity in data representation and protocols. Service-Oriented Architectures are based on standardized service contracts, in order to infuse characteristic properties (stateless interactions, atomicity etc). However, contracts cannot ensure correctness of services if essential operational details are overlooked, as is usually the case. We introduce a modeling framework for the specification of Web Service architectures, in terms of formal operational semantics. Our approach aims to enable rigorous design of Web Services, based on the Behaviour Interaction Priorities (BIP) component framework and the principles of correctness-by construction. We provide executable BIP models for SOAP-based and RESTful Web Services and for a service architecture with session replication. The architectures are treated as reusable design artifacts that may be composed, such that their characteristic properties are preserved. Â© 2014 IEEE.",10.1109/SOSE.2014.12,Service-Oriented Architecture;Rigorous Design;Web Services;Correctness-by-Construction; Computer architecture;Service-oriented architecture;Ports (Computers);Connectors;Protocols;Semantics; data structures;formal specification;service-oriented architecture;Web services; correct-by-construction Web service architecture;service-oriented computing;service autonomy;data representation;protocols;service-oriented architectures;standardized service contracts;modeling framework;Web service architecture specification;formal operational semantics;Web service design;behaviour interaction priorities component framework;BIP component framework;correctness-by construction;executable BIP models;SOAP-based Web service;RESTful Web services;session replication;reusable design artifacts,,1,1,,
,Infoset for Service Abstraction and Lightweight Message Processing,"Li, L and Chou, W","Web services technologies are undergoing some significant changes at several levels, ranging from architectural styles (REST vs. SOAP) to message formats. To cope with these changes, there is a need to design services in an abstract fashion that is less sensitive to these changes so that our technological and economic investments are protected. To address this issue, this paper proposes an abstract modeling framework, called Infoset, both as a design and analysis tool and a message processing architecture. The benefit of Infoset is demonstrated first on some dual web services that provide both REST and SOAP access. The Infoset analysis modeling reveals the commonality and differences between dual web services, making it feasible to design abstract web services. Infoset also leads to a rule based message processing architecture that avoids the problems in current static Object/XML SOAP engines. By dynamically computing the context of Infoset rules in message workflows, dependences between integrated web services are reduced and the reusability of services logic is increased. A prototype of this architecture is implemented and the preliminary experimental results indicate that the performance is satisfactory Â© 2009 IEEE.",10.1109/ICWS.2009.120,Infoset;SOAP;REST;Service Modeling;Lightweight Message Processing;Eventing; Web services;Simple object access protocol;Computer architecture;Investments;Protection;XML;Engines;Context-aware services;Logic;Prototypes; software architecture;Web services; service abstraction;message processing architecture;Web services technologies;architectural styles;Infoset analysis modeling;Object-XML SOAP engines,,1,1,1,1
,An automatic Semantic Web Service composition approach based on PDDL,Wang Xing; Zhang Wenpeng,"In this paper, against the problem of composing Semantic Web Services using AI planner, we proposed an algorithm that translates OWL-S process models to the PDDL actions. After this work, we can choose the most suitable AI planner to compose Web services. The algorithm presented in this paper is an attempted and exploratory work, so there is some shortage in it. The reality that PDDL does not support iteration construct does restrict the ability of express, while some planners have be restricted by this behavior, such as HTN. We will explore PDDL to support this function, either by existing constructs or by developing new construct.",10.1109/ICENT.2010.5532129,Semantic Web;Service Compositio;PDDL;OWL-S; Semantic Web;Web services;Ontologies;Artificial intelligence;OWL;Process planning;Grounding;Educational technology;Software algorithms;Service oriented architecture; knowledge representation languages;planning (artificial intelligence);semantic Web;Web services; automatic semantic Web service composition;PDDL;AI planning;OWL-S;HTN;Planning Domain Definition Language,,1,1,,
,Service Contract Template,A. Simon; T. Rischbeck,"Summary form only given. Loose coupling is a cornerstone for service-oriented architecture (SOA). Service contracts enable loose coupling, because they hide service-internal details from the outside world behind a facade. In the Web services world, the service contract is commonly understood as a WSDL document possibly decorated with WS-policy annotations. Such formal XML description is not immediately useful to business people. This paper proposes the notion of a service metadata document that contains human-readable business aspects of the service in addition to technical artifacts. Stakeholders at the business and technical level work collaboratively on the service metadata document and use it as a common framework for discussion. We see the service contract as a composition of functional metadata and a set of policies, such as security constraints, access restrictions for user groups, transport and service level agreements, charging, etc. For example, enterprises often have different security requirements when a service is consumed from within the company than when it is consumed by an external business partner. The service lifecycle is initiated by business people on the basis of a service contract template; the first step is a high-level description of the desired service characteristics. In an iterative process the document is then successively refined as it percolates from the management level to service architect and other stakeholders and as business requirements are tested against technical realities. Technical artifacts (WSDL, XSD, etc.) are added to the service contract and could be placed in a registry so that the service is visible to other departments or external partners. The clear distinction between service metadata and policies also helps maintaining a consistent model over runtime WSDL proliferation. Typically, policies are enforced by intermediaries, such as XML firewalls, enterprise service bus (ESB) or other WS-infrastructure. Each such intermediary offers a virtual service endpoint to the actual service implementation. Because different policies may be enforced at each endpoint and because of the different locations, the WSDL for each of these virtual service endpoints is different",10.1109/SCC.2006.89,; Contracts;Service oriented architecture;XML;Security;Web services;Collaborative work;Online Communities/Technical Collaboration;Companies;Testing;Runtime; business data processing;Internet;specification languages; service contract template;service-oriented architecture;WSDL document;Web service description language;Web service policy annotation;service metadata document;human-readable business service aspect;functional metadata;policy intermediary enforcement;virtual service endpoint,,1,1,,
,Extending the Devices Profile for Web Services Standard Using a REST Proxy,S. N. Han; S. Park; G. M. Lee; N. Crespi,"The Devices Profile for Web Services (DPWS) standard enables the use of Web services for certain Internet of Things (IoT) applications. DPWS is appropriate for implementing services on resource-constrained devices. However, little investigation has gone into how such services perform in IoT scenarios as regards features such as dynamic discovery and publish-subscribe eventing. Moreover, DPWS introduces considerable overhead due to its use of SOAP envelopes in exchange messages. To tackle these problems, the authors extend the DPWS standard using a REST proxy, creating a RESTful Web API that paves the way for developers to invest more in this technology.",10.1109/MIC.2014.44,Internet of Things;DPWS;REST; Web services;Standards;Simple object access protocol;Resource management; application program interfaces;Internet of Things;Web services; REST proxy;devices profile for Web services standard;DPWS standard;Internet of Things applications;IoT applications;resource-constrained devices;SOAP envelopes;RESTful Web API,,1,1,1,1
,Reengineering Legacy Systems with RESTful Web Service,Y. Liu; Q. Wang; M. Zhuang; Y. Zhu,"Most of the SOA (Service Oriented Architecture) applications are not brand new and usually evolved from legacy systems. Legacy systems carry out the enterprisepsilas most crucial business information together with business processes and many organizations have leveraged the value of their legacy systems by exposing parts of it as services. Most of current Web services are SOAP-RPC style services. The evolution of the Web 2.0 phenomenon has led to the increased adoption of the RESTful services paradigm and reengineering legacy system to SOA with RESTful Web services is not only for reusing but will bring other benefits due to its special features. In this paper, the key issues for reengineering legacy systems with RESTful Web services are discussed. A common process for reengineering legacy systems to REST-style is proposed. The candidate Web services are identified by legacy systems comprehension at first. Then blend services are generated based on relationships between entities and constraint rules specified. The generated URIs are refined and split carefully to represent the RESTful Web services.",10.1109/COMPSAC.2008.89,Legacy system;Reengineering;RESTful web service; Web services;Service oriented architecture;Business;Software;Wrapping;Data mining;Simple object access protocol; business data processing;software maintenance;systems re-engineering;Web services; legacy system reengineering;RESTful Web service;service oriented architecture;business information;business processes;SOAP-RPC style services;Web 2.0 phenomenon,,1,1,,
,Integration and orchestration of heterogeneous services,Kejing He,"Service integration and orchestration are important ways to make use of existing services and to build larger systems. In the real world, services are heterogeneous. The most popular services are SOAP/WSDL services and Web applications. The heterogeneous services bring challenges to service integration and orchestration. Prior attempts use adapters or converters to mask the heterogeneity and host alien services, which potentially lead to inefficiency. This paper reviews the current techniques for heterogeneous services integration and orchestration. Comparing different techniques' strengths and weaknesses, this paper presents a hybrid orchestration approach that make use of the heterogeneous nature of the services for efficient orchestration. The proposed approach can be used for large scale efficient integration of numerous disparate services (e.g, SOAP/WSDL services and RESTful services). Â©2009 IEEE.",10.1109/JCPC.2009.5420139,; Web services;Large scale integration;Simple object access protocol;Service oriented architecture;Helium;Computer science;Application software;Programming;Robustness;Filters; Internet;software architecture;Web services; SOAP-WSDL services;Web applications;converters;host alien services;heterogeneous services integration;hybrid orchestration approach;service-oriented architecture,,1,1,,
,Improving REST Service Discovery with Unsupervised Learning Techniques,J. M. Rodriguez; A. Zunino; C. Mateos; F. O. Segura; E. Rodriguez,"Discovery and replacement are two of the main features of Service Oriented Computing. There has been much research on these topics for traditional SOAP-based Web Services, particularly on discovery. Although the original proposal for REST services lacks this feature, some researchers have studied how to perform discovery for REST services using both IR based techniques and semantic techniques. This work presents a novel IR-based discovery approach for REST services described via WADL files. Our approach takes advantage of unsupervised machine learning techniques for improving discovering results. In particular, the approach relies on clustering algorithms, such as K-means or X-means, to reduce the search space for a given query. The experimental results show that using an appropriate clustering technique, our approach achieves nearly 4 times higher F-measure than a traditional IR-based search engine, namely Apache Lucene. Additionally, the paper reports other metrics, such as Recall, Precision, Precision at-10 and Recall at-10, that also point out that the proposed approach outperforms Lucene. Finally, another important contribution is a set of queries and WADL files gathered from the Internet that can be used for evaluating future discovery proposals.",10.1109/CISIS.2015.14,REST;Services Discovery;Information Retrieval;WADL; Measurement;Web services;Semantics;Indexing;Ontologies; pattern clustering;query processing;service-oriented architecture;unsupervised learning;Web services; REST service discovery improving;service oriented computing;SOAP-based Web services;IR based techniques;semantic techniques;IR-based discovery approach;WADL files;unsupervised machine learning techniques;K-means clustering algorithm;X-means clustering algorithm;search space reduction;query processing;f-measure metric;precision at-10 metric;recall at-10 metric,,1,1,,
,RESTful web services for service provisioning in next-generation networks: a survey,F. Belqasmi; R. Glitho; C. Fu,"Next-generation networks, as envisioned by ITU-T, are packet-based networks, capable of provisioning consistent and ubiquitous services to end users independent of the network, access technology, and devices used. RESTful web services are now being contemplated as a technology for service provisioning in NGNs. They are emerging as an alternative, which may be more adequate than SOAP-based web services in some cases. SOAP-based web services are modular applications that can be discovered and invoked over a network. RESTful web services, on the other hand, are defined as a network architectural style for distributed hypermedia systems. This article presents a survey on RESTful web services for service provisioning in NGNs. It introduces the concept of RESTful web services and reviews the state of the art of RESTful-based service provisioning in NGNs. It also provides an evaluation of the overall suitability of RESTful web services for service provisioning in NGNs, and discusses research directions. RESTful web services do show significant potential for service provisioning in NGNs. However, open issues such as publication/discovery and mechanisms for the development of complex session-based services need to be solved before its full potential can be realized.",10.1109/MCOM.2011.6094008,; Web services;Next generation networking;Servers;Subscriptions;Protocols;Media; 3G mobile communication;access protocols;hypermedia;IP networks;mobile computing;multimedia communication;next generation networks;Web services; RESTful web services;service provisioning;next-generation networks;ITU-T;packet-based networks;ubiquitous services;access technology;NGN;SOAP-based web services;distributed hypermedia systems;complex session-based services;simple object access protocol;representational state transfer;3GPP;IP multimedia subsystem,,1,1,,
,Achieving survivability in business process execution language for Web services (BPEL) with exception-flows,C. K. Fung; P. C. K. Hung; D. H. Folger,"Survivability is defined as the capability of a service to fulfill its mission in a timely manner, even in the presence of attacks, failures, or accidents. Because of the severe consequences of failure, organizations are focusing on service survivability as a key risk management strategy for business processes. There are three key survivability properties: resistance, recognition, and recovery. Recovery, a hallmark of survivability, is the capability to maintain critical components and resource during attack, limit the extent of damage, and restore full services following attack. Exception handling is a way to deals with the recovery aspect of survivability. Business process execution language for Web services (BPEL) has been proposed for formal specification of business processes and interaction protocols. BPEL defines an interoperable integration model that facilitates expansion of automated process integration in both intra- and intercorporate environments. A business process description requires the specification of both the normal flow and the possible variations due to exceptional situations that can be anticipate and monitored. This paper bridges the analysis of business process survivability and its recovery aspect in terms of exception handling in the context of BPEL. The feasibility of the proposed model is demonstrated using an illustrative travel reservation example.",10.1109/EEE.2005.26,Survivability;Attack tree;Web services;BPEL;Exceptional Handling; Web services;Service oriented architecture;Information technology;Independent component analysis;Imaging phantoms;Accidents;Risk management;Formal specifications;Protocols;Monitoring; business data processing;risk management;system recovery;exception handling;Internet;formal specification;open systems; business process execution language;BPEL;Web service;business process survivability;risk management;system recovery;exception handling;formal specification;interoperable integration model,,1,1,,
,Using REST Web-Services Architecture for Distributed Simulation,"Al-Zoubi, K and Wainer, G","In recent years, Web Services technologies have been successfully used for simplifying interoperability while providing scalability and flexibility in multiple applications, including distributed simulation software. The RESTful-CD++ simulation Server provides Web Services according to the REST principles by exposing services as URIs and consumed via HTTP messages. Therefore, the server becomes a service part of the Web that can be easily mashed-up with other applications and simulation software. In contrast, RPC-style SOAP-based Web Services use the Web as a transmission medium by exposing few URIs and many RPCs. RESTful-CD++ is (to our best knowledge) the only existing RESTful system in this area. Further, this distributed simulation package provides pioneering distributed simulation services using the Web architectural style. We present an overview of the principles, design and implementation of the RESTful-CD++ HTTP server and DCD++ simulation. We show that REST fulfills WS objectives with a much better and easier style than the SOAP-based systems. Â© 2009 IEEE.",10.1109/PADS.2009.16,DEVS;CD++;Web-Services;SOA;REST;Distributed Simulation; Object oriented modeling;Web server;Integrated circuit modeling;Computational modeling;Computer simulation;Web services;Application software;Service oriented architecture;Scalability;Containers; digital simulation;open systems;Web services; REST Web-services architecture;Web services technology;interoperability;distributed simulation software;RESTful-CD++ simulation server;HTTP message;URI;DCD++ simulation,,1,1,,
,Secure Browser-Based Access to Web Services,L. Lo Iacono; H. Rajasekaran,"Access to Web services via Web front-ends provides all the advantages related to browser-based thin clients and is therefore a common setting. However, providing end-to-end security between Web browsers and Web services is currently not feasible due to the inadequate support for Web service security in Web browsers. Moreover, the current SOAP APIs offered by the major browsers are incompatible with one another making the task of providing a uniform solution to address this problem difficult. This paper describes a method by which the Web service communication between a Web browser and a Web service is protected end-to-end using Web service security thereby providing a means to overcome this limitation.",10.1109/ICC.2009.5199439,; Web services;Simple object access protocol;Portals;XML;Data security;Service oriented architecture;Environmental management;Communications Society;National electric code;Laboratories; application program interfaces;online front-ends;portals;security of data;software architecture;Web services; Web service security;secure browser-based access;Web front-ends;browser-based thin clients;end-to-end security;Web browsers;SOAP API;service-oriented architecture;Web portal,,1,1,,
,Towards a Distinction between Application State Resources and Data Resources in ROA,"Lira, H A and Dantas, J R V and De Azevedo Muniz, B and Felix, L H S and Nunes, T M and Farias, P P M","In the context of ROA (Resource Oriented Architecture), this paper proposes a distinction between two REST (Representational State Transfer) resources types: The Data Resources (DR) and the Application State Resources (ASR). DR are representations of the application data, at the persistence layer, or remote functions that can be reused in several applications. The ASR represents RESTful application states. An ASR has to follow the HATEOAS(Hypermedia as the Engine of Application State) principle by including links to the next possible application states. The proposed distinction between ASR and DR can be seen as an alternative approach to the distinction between pure RESTful web services and Web APIs. Furthermore, this paper models the ASR transitions using BPMN (Business Process Model and Notation). The BPMN workflow can properly represent the application states. Â© 2015 IEEE.",10.1109/CIT/IUCC/DASC/PICOM.2015.134,REST;BPMN;Web Services;Choreography; Servers;Web services;Electronic mail;Business;Protocols;Representational state transfer;Engines; application program interfaces;business data processing;software architecture;Web services; application state resources;data resources;ROA;resource oriented architecture;REST resources types;representational state transfer;DR;application data representation;persistence layer;remote functions;RESTful application states;HATEOAS;hypermedia-as-the-engine-of-application state principle;RESTful Web services;Web API;ASR transitions;BPMN workflow;business process model-and-notation,,1,1,,
,Exposing resources as Web services: A performance oriented approach,R. Kanagasundaram; S. Majumdar; M. Zaman; P. Srivastava; N. Goel,"This paper focuses on exposing computing and database resources as Web services for providing inter-operability among clients and servers that uses diverse technologies. A systematic performance analysis of two technologies, the RESTful Web Service and the SOAP-based Web service used for exposing resources as Web services is reported. A novel Hybrid Web service that combines the advantages of both RESTful and SOAP-based Web services is proposed and analyzed.",,RESTful Web service;SOAP-based Web service;Web service Performance;inter-operability;system performance; Databases;Java;Servers;Simple object access protocol;Performance analysis;Operating systems; client-server systems;open systems;protocols;Web services; Web services;performance oriented approach;computing resources;database resources;interoperability;clients and servers;diverse technology;systematic performance analysis;RESTful Web service;SOAP-based Web service;hybrid Web service,,1,1,,
,"SSWiM: A Semantic Service, Wrapper and Invocation Manager","Sibirtseva, A and Shen, Z and Su, J and Weng, F and Yan, B and Meng, Y","Integrating service description, discovery, and invocation functionalities presents several fundamental problems in the management of web services and is a basic problem for composing web services over a network. In this paper, we present the design of a system called ""Semantic Service, Wrapper, and Invocation Manager"" (SSWiM) which provides these key functionalities. In particular, SSWiM manages storage of and queries over service descriptions in a service registry, wraps existing REST services with WSDL service interfaces, and supports for service invocation at run time. We describe WSDL services based on two levels of ontologies: a domain ontology for data sets and a service ontology for services. The input/output messages (data) and the functionality of a (WSDL) service are mapped to the domain ontology and the service ontology, respectively. We developed the data mapping methodology and the mapping algorithm. Service descriptions are registered in our service registry which supports a set of service discovery queries. The wrapper builder in SSWiM can generate WSDL services automatically from REST services so that services can be invoked uniformly in WSDL format. Â© 2008 IEEE.",10.1109/CECandEEE.2008.120,service invocation;service ontology;semantic services;service wrapper;service discovery; Web services;Ontologies;Telematics;Service oriented architecture;Art;Software systems;Conference management;Technology management;Computer science;Computer network management; ontologies (artificial intelligence);semantic Web;Web services; semantic service wrapper and invocation manager;service ontology;Web services;input-output messages;mapping algorithm,,1,1,,
,Utilizing Owl-S in multi-agent based architecture for semantic e-Government services,M. Zeeshan Ali Ansari; M. Imran Khan,"One of the major objectives of e-Government is to provide highest level of ease and satisfaction of to citizens. This requires a single window access to various services of government. An ICT solution for supporting such a use-case can be developed using web-services that interact autonomously with each other. However there are some limitations of web services that hinder the goal of seamless integration. Web services alone are not able to overcome these limitations due to the absence of some vital characteristics. Therefore to eliminate the limitations, this paper presents an architecture that augments web services with multi-agent technology and uses OWL-S for semantic description. The paper also discusses the implementation of the proposed architecture and also includes a critical evaluation of the proposal. This resulted in the identification of certain deficiencies in the proposed architecture as well as possible future enhancements which have been included in the paper. In addition to this, it also resulted in the identification of reasons behind the slow espousal of semantic web services.",10.1109/ITSIM.2008.4631710,; Web services;Ontologies;Semantic web;Reliability;Scalability;Protocols;Government; ; ,,1,1,,
,Google based hybrid approach for discovering services,S. Sharma; J. S. Lather; M. Dave,"The Current description standards for Web Services such as WSDL and UDDI have a significant drawback of being restricted to the syntactic aspects of service. A service provider registers a service in the universal repository i.e. UDDI so that the service consumers can search and discover the required service that meets the user functional requirements from thousands of registered services. Matching the user request with all services in a particular category of the repository is a cumbersome task. Semantic approaches are required to further assist the user in discovering relevant services. In this paper, we have proposed a semantic approach that gives ranked list of services based on the web based relatedness score and helps the users in the selection of potentially relevant and semantically similar services within a category. The proposed approach has been implemented on 80 OWLS services and the results have shown that the approach gives ranked list of services with ease of the selection process for the user.",10.1109/ICOSC.2015.7050859,Semantic Web Service Discovery;Normalized Google Distance;Machine learning;Text Mining;OWLS; Semantics;Kernel;MATLAB;Automobiles;Information filters; knowledge representation languages;semantic Web;Web services; Google based hybrid approach;service discovery;Web services;WSDL;UDDI;Web based relatedness score;OWLS services,,1,1,,
,Exposing GNU Octave Signal Processing Functions as Extensible Markup Language (XML) Web Services,R. J. Castaldo; M. A. McKay; V. Tosic,"The set of industry standards for Extensible Markup Language (XML) Web services, such as SOAP and Web Services Description Language (WSDL), enables Internet-wide, implementation-independent distributed computing. Many modern lower-end devices (e.g., mobile phones) can host relatively lightweight client software for SOAP messaging, but do not have resources for hosting GNU Octave (which requires 65 MB of run-time memory). Our project enables that such devices can use GNU Octave signal processing functions. We are the first who have exposed 74 GNU Octave signal processing functions as Web services. A client submits over the Internet a SOAP request in a HTTP message to the Web service. At the Web service side, Apache Tomcat servelet container accepts this message and extracts SOAP content, Apache Axis analyzes this SOAP content, our Java Web service code invokes our new Java-based Octave API, which in turn invokes GNU Octave that performs numerical calculations. The response passes from Octave, through Octave API, our Java Web service code, Axis, to Tomcat that sends an HTTP message with SOAP reply to the client. Our solutions can be also re-used for exposing any program in GNU Octave (or MATLAB) as a Web service",10.1109/CCECE.2006.277675,Web services;Extensible Markup Language (XML);GNU Octave;Apache Axis;signal processing; XML;Signal processing;Web services;Simple object access protocol;Java;Web and internet services;Computer industry;Distributed computing;Mobile handsets;Runtime; application program interfaces;client-server systems;Java;message passing;signal processing;Web services;XML; GNU Octave signal processing functions;Extensible Markup Language;Web services;Internet;implementation-independent distributed computing;lightweight client software;SOAP request;HTTP message;Apache Tomcat servelet;Apache Axis analyzes;Java Web service code;Java-based Octave API,,1,1,,
